{"version":3,"sources":["../src/botpress.js"],"names":["RESTART_EXIT_CODE","mkdirIfNeeded","path","logger","fs","existsSync","info","mkdirSync","err","error","message","process","exit","REQUIRED_PROPS","validateBotfile","botfile","_","get","console","log","Error","packageJson","version","prop","botpress","constructor","options","start","cluster","isMaster","firstWorkerHasStartedAlready","quit","code","stopServer","receiveMessageFromWorker","workerStatus","stats","track","type","on","worker","fork","disableClusterMode","isWorker","send","_start","catch","stack","projectLocation","isString","dirname","resolve","_setupEnv","require","interval","opts","result","hasInspectMode","inspect","i","setInterval","botpressPath","join","__dirname","isFirstRun","dataLocation","dataDir","configLocation","modulesConfigDir","dbLocation","logs","db","sqlite","location","postgres","janitor","enableDbStorageIfNeeded","kvs","_kvs","cloud","login","useCloud","isPaired","updateRemoteEnv","configManager","ConfigurationManager","security","securityConfig","modules","moduleDefinitions","_scan","events","EventBus","notifications","knex","about","licensing","bp","middlewares","hear","middleware","hearMiddleware","fallbackMiddleware","users","ghostManager","enabled","contentManager","mediaManager","Object","keys","defaultGetItemProviders","forEach","registerGetItemProvider","provider","renderers","stateManager","flowProvider","FlowProvider","dialogJanitor","dialogEngine","DialogEngine","crypto","Crypto","skillsManager","SkillsManager","onError","create","level","redirectUrl","registerOutputProcessor","DialogProcessors","install","incomingQueue","Queue","redis","subscribe","sendIncomingImmediately","job","event","outgoingQueue","sendOutgoingImmediately","messages","in","enqueue","cancelAll","peek","out","register","incomingMiddleware","assign","skills","defineProperty","warn","loadedModules","_load","dbModulesMigration","migration","up","length","_loadedModules","registerSkillsFromModules","values","init","_bindEvents","server","then","srv","stop","serverPID","pid","inspectSignal","platform","_debugProcess","kill","emit","mod","handlers","ready","configuration","createHelpers","botUrl","chalk","green","bold","isDeveloping","wait","middlewareAutoLoading","isNil","debug","load","projectEntry","call","trackException","reason","p","restart","setTimeout","envPath","envConfig","dotenv","parse","readFileSync","k","env","ENV_OVERLOAD","module","exports"],"mappings":"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","file":"botpress.js","sourcesContent":["/**\n * The global instance of Botpress, which is the main object\n * your bot will use to interact with Botpress.\n * @var {Botpress} bp\n * @example\n * // File: index.js\n * // All bots are passed an instance of `bp` upon start\n * // This is an example of an empty bot\n * module.exports = (bp) => { ... }\n */\n\n/**\n * @namespace Botpress\n * @property {DialogEngine}  dialogEngine APIs to create and manipulate conversation flows\n * @property {KVS}  kvs Convenient, high-level storage mechanism\n * @property {ContentManager}  contentManager APIs to manage the content programmatically\n * @property {ContentRenderer}  renderers Change the look and feel of the\n * Content Elements (messages) on the different channels\n * @property {Database}  db (Advanced) Access to the internal Botpress Database\n * @property {Users}  users Store and manipulate data about users\n * @property {DialogStateManager}  dialogEngine.stateManager APIs to manipulate conversation states\n * @property {Logger}  logger Logging utility\n * @property {Botfile}  botfile The current botfile of the running bot\n */\n\nimport 'source-map-support/register'\n\nimport chalk from 'chalk'\nimport path from 'path'\nimport fs from 'fs'\nimport _ from 'lodash'\nimport cluster from 'cluster'\nimport dotenv from 'dotenv'\nimport ms from 'ms'\nimport opn from 'opn'\n\nimport createMiddlewares from './middlewares'\nimport createLogger from './logger'\nimport createSecurity from './security'\nimport createNotifications from './notifications'\nimport createHearMiddleware from './hear'\nimport createFallbackMiddleware from './fallback'\nimport createDatabase from './database'\nimport createGhostManager from './ghost-content'\nimport createMediaManager from './media-manager'\nimport createLicensing from './licensing'\nimport createAbout from './about'\nimport createModules from './modules'\nimport createCloud from './cloud'\nimport createRenderers from './renderers'\nimport createUsers from './users'\nimport createContentManager from './content/service'\nimport defaultGetItemProviders from './content/getItemProviders'\nimport createHelpers from './helpers'\nimport createJanitor from './janitor'\nimport stats from './stats'\n\nimport EventBus from './bus'\nimport ConfigurationManager from './config-manager'\nimport FlowProvider from './dialog/provider'\nimport StateManager from './dialog/state'\nimport DialogEngine from './dialog/engine'\nimport DialogProcessors from './dialog/processors'\nimport DialogJanitor from './dialog/janitor'\nimport SkillsManager from './skills'\nimport Queue from './queues/memory'\nimport Crypto from './security/crypto'\n\nimport packageJson from '../package.json'\n\nimport createServer from './server'\n\nimport { getDataLocation, getBotpressVersion, validateBotVersion, isDeveloping, print } from './util'\n\nconst RESTART_EXIT_CODE = 107\n\nconst mkdirIfNeeded = (path, logger) => {\n  if (!fs.existsSync(path)) {\n    logger.info(`Creating data directory: ${path}`)\n\n    try {\n      fs.mkdirSync(path)\n    } catch (err) {\n      logger.error(`[FATAL] Error creating directory: ${err.message}`)\n      process.exit(1)\n    }\n  }\n}\n\nconst REQUIRED_PROPS = ['botUrl']\n\nconst validateBotfile = botfile => {\n  if ('disableFileLogs' in botfile || _.get(botfile, 'log.file')) {\n    console.log(\n      `\n      You're using the old logs configuration format.\n      Since v11 botpress has stopped storing logs in files and\n      has moved them to the database.\n\n      Please update your botfile.\n\n      Old configuration format:\n        /*\n          By default logs are enabled and available in dataDir\n        */\n        disableFileLogs: false,\n        log: {\n          file: 'bot.log',\n          maxSize: 1e6 // 1mb\n        }\n\n      New format:\n        /*\n          By default logs are enabled and stored in the DB for 30 days\n        */\n        logs: {\n          enabled: true,\n          keepDays: 30\n        }\n      `\n    )\n    throw new Error('Outdated botfile format')\n  }\n\n  validateBotVersion(packageJson.version, botfile.version)\n\n  for (const prop of REQUIRED_PROPS) {\n    if (!(prop in botfile)) {\n      throw new Error(`Missing required botpress setting: ${prop}`)\n    }\n  }\n}\n\nclass botpress {\n  constructor({ botfile, options = {} }) {\n    this.version = getBotpressVersion()\n    /**\n     * The project location, which is the folder where botfile.js located\n     */\n    this.projectLocation = _.isString(botfile) ? path.dirname(botfile) : path.resolve('.')\n\n    /**\n     * Setup env with dotenv *before* requiring the botfile config\n     */\n    this._setupEnv()\n\n    /**\n     * The botfile config object\n     */\n    this.botfile = _.isString(botfile) ? require(botfile) : botfile\n    validateBotfile(this.botfile)\n\n    this.stats = stats(this.botfile)\n\n    this.interval = null\n\n    /*\n      Check --inspect flag\n    */\n\n    const opts = _.result(options, 'opts') || {}\n\n    this.hasInspectMode = opts.inspect || opts.i\n  }\n\n  /**\n   * Start the bot instance\n   *\n   * It will do the following initiation steps:\n   *\n   * 1. setup logger\n   * 2. resolve paths (dataLocation)\n   * 3. inject security functions\n   * 4. load modules\n   * @private\n   */\n  async _start() {\n    this.stats.track('bot', 'started')\n\n    if (!this.interval) {\n      this.interval = setInterval(() => {\n        this.stats.track('bot', 'running')\n      }, 30 * 1000)\n    }\n\n    this.botpressPath = path.join(__dirname, '../')\n\n    const { projectLocation, botfile } = this\n\n    const isFirstRun = fs.existsSync(path.join(projectLocation, '.welcome'))\n    const dataLocation = getDataLocation(botfile.dataDir, projectLocation)\n    const configLocation = getDataLocation(botfile.modulesConfigDir, projectLocation)\n    const dbLocation = path.join(dataLocation, 'db.sqlite')\n    const version = packageJson.version\n\n    const logger = createLogger(botfile.logs)\n    mkdirIfNeeded(dataLocation, logger)\n    mkdirIfNeeded(configLocation, logger)\n\n    const db = createDatabase({\n      sqlite: { location: dbLocation },\n      postgres: botfile.postgres,\n      logger,\n      botpressPath: this.botpressPath\n    })\n\n    await db.get() // Running migrations\n\n    const janitor = createJanitor({ db, logger })\n\n    logger.enableDbStorageIfNeeded({ db, janitor })\n    logger.info(`Starting botpress version ${version}`)\n\n    janitor.start()\n\n    const kvs = db._kvs\n\n    const cloud = await createCloud({ projectLocation, botfile, logger })\n\n    if (!!botfile.login.useCloud && (await cloud.isPaired())) {\n      setInterval(() => cloud.updateRemoteEnv(), ms('10m'))\n      cloud.updateRemoteEnv() // async on purpose\n    }\n\n    const configManager = new ConfigurationManager({ configLocation, botfile, logger })\n\n    const security = await createSecurity({\n      dataLocation,\n      securityConfig: botfile.login,\n      projectLocation,\n      db,\n      cloud,\n      logger\n    })\n\n    const modules = createModules(logger, projectLocation, dataLocation, configManager)\n\n    const moduleDefinitions = modules._scan()\n\n    const events = new EventBus()\n\n    const notifications = createNotifications({\n      knex: await db.get(),\n      modules: moduleDefinitions,\n      logger,\n      events\n    })\n    const about = createAbout(projectLocation)\n    const licensing = createLicensing({\n      logger,\n      projectLocation,\n      version,\n      db,\n      botfile,\n      bp: this\n    })\n    const middlewares = createMiddlewares(this, dataLocation, projectLocation, logger)\n    const { hear, middleware: hearMiddleware } = createHearMiddleware()\n    const { middleware: fallbackMiddleware } = createFallbackMiddleware(this)\n\n    const users = createUsers({ db })\n    const ghostManager = createGhostManager({\n      projectLocation,\n      logger,\n      db,\n      enabled: !!_.get(botfile, 'ghostContent.enabled')\n    })\n    const contentManager = await createContentManager({\n      logger,\n      projectLocation,\n      botfile,\n      ghostManager\n    })\n    const mediaManager = await createMediaManager({\n      botfile,\n      logger,\n      ghostManager,\n      projectLocation\n    })\n\n    // Register the built-in item providers such as \"-random()\"\n    Object.keys(defaultGetItemProviders).forEach(provider => {\n      contentManager.registerGetItemProvider(provider, defaultGetItemProviders[provider])\n    })\n\n    const renderers = createRenderers({\n      logger,\n      middlewares,\n      db,\n      contentManager,\n      botfile\n    })\n\n    const stateManager = StateManager({ db })\n    const flowProvider = new FlowProvider({ logger, projectLocation, botfile, ghostManager })\n    const dialogJanitor = DialogJanitor({ db, middlewares, botfile })\n    const dialogEngine = new DialogEngine({ flowProvider, stateManager, logger })\n    const crypto = new Crypto({ botfile })\n\n    const skillsManager = new SkillsManager({ logger })\n\n    dialogEngine.onError(({ message }) =>\n      notifications.create({ message: `DialogEngine: ${message}`, level: 'error', redirectUrl: '/logs' })\n    )\n\n    // Registers the default output processor, which sends messages to the user\n    dialogEngine.registerOutputProcessor(DialogProcessors['default'])\n    dialogJanitor.install()\n\n    const incomingQueue = new Queue('Incoming', logger, {\n      redis: botfile.redis\n    })\n    incomingQueue.subscribe(job => middlewares.sendIncomingImmediately(job.event))\n\n    const outgoingQueue = new Queue('Outgoing', logger, {\n      redis: botfile.redis\n    })\n    outgoingQueue.subscribe(job => middlewares.sendOutgoingImmediately(job.event))\n\n    const messages = {\n      in: {\n        enqueue: event => incomingQueue.enqueue({ event }),\n        cancelAll: event => incomingQueue.cancelAll({ event }),\n        peek: event => incomingQueue.peek({ event })\n      },\n      out: {\n        enqueue: event => outgoingQueue.enqueue({ event }),\n        cancelAll: event => outgoingQueue.cancelAll({ event }),\n        peek: event => outgoingQueue.peek({ event })\n      }\n    }\n\n    middlewares.register(renderers.incomingMiddleware)\n    middlewares.register(hearMiddleware)\n    middlewares.register(fallbackMiddleware)\n\n    _.assign(this, {\n      dataLocation,\n      isFirstRun,\n      version,\n      logger,\n      security, // login, authenticate, getSecret\n      events,\n      notifications, // load, save, send\n      about,\n      middlewares,\n      hear,\n      licensing,\n      modules,\n      db,\n      janitor,\n      kvs,\n      configManager,\n      cloud,\n      renderers,\n      users,\n      ghostManager,\n      contentManager,\n      mediaManager,\n      dialogEngine,\n      dialogJanitor,\n      messages,\n      crypto,\n      skills: skillsManager\n    })\n\n    Object.defineProperty(this, 'umm', {\n      get() {\n        logger.warn('DEPRECATION NOTICE – bp.umm is deprecated and will be removed – Please see bp.renderers instead.')\n        return renderers\n      }\n    })\n\n    const loadedModules = await modules._load(moduleDefinitions, this)\n\n    const dbModulesMigration = await this.db.migration(db, moduleDefinitions)\n    await dbModulesMigration.up()\n\n    this.stats.track('bot', 'modules', 'loaded', loadedModules.length)\n\n    _.assign(this, {\n      _loadedModules: loadedModules\n    })\n\n    skillsManager.registerSkillsFromModules(_.values(loadedModules))\n    await contentManager.init()\n\n    notifications._bindEvents()\n\n    const server = createServer(this)\n    server.start().then(srv => {\n      this.stopServer = srv && srv.stop\n\n      if (this.hasInspectMode) {\n        const serverPID = process.pid\n        const inspectSignal = 'SIGUSR1'\n\n        if (process.platform === 'win32') {\n          process._debugProcess(serverPID)\n        } else {\n          process.kill(serverPID, inspectSignal)\n        }\n      }\n\n      events.emit('ready')\n      for (const mod of _.values(loadedModules)) {\n        mod.handlers.ready && mod.handlers.ready(this, mod.configuration, createHelpers)\n      }\n\n      const { botUrl } = botfile\n      logger.info(chalk.green.bold(`Bot launched. Visit: ${botUrl}`))\n\n      if (isDeveloping) {\n        opn(botUrl, { wait: false })\n      }\n    })\n\n    const middlewareAutoLoading = _.get(botfile, 'middleware.autoLoading')\n    if (!_.isNil(middlewareAutoLoading) && middlewareAutoLoading === false) {\n      logger.debug('Middleware Auto Loading was disabled. Call bp.middlewares.load() manually.')\n    } else {\n      middlewares.load()\n    }\n\n    const projectEntry = require(projectLocation)\n    if (typeof projectEntry === 'function') {\n      projectEntry.call(projectEntry, this)\n    } else {\n      logger.error('[FATAL] The bot entry point must be a function that takes an instance of bp')\n      process.exit(1)\n    }\n\n    process.on('uncaughtException', err => {\n      logger.error('[FATAL] An unhandled exception occurred in your bot', err)\n      if (isDeveloping) {\n        logger.error(err.stack)\n      }\n\n      this.stats.trackException(err.message)\n      process.exit(1)\n    })\n\n    process.on('unhandledRejection', (reason, p) => {\n      logger.error('Unhandled Rejection in Promise: ', p, 'Reason:', reason)\n\n      this.stats.trackException(reason)\n      if (isDeveloping && reason && reason.stack) {\n        logger.error(reason.stack)\n      }\n    })\n  }\n\n  start = () => {\n    if (cluster.isMaster) {\n      let firstWorkerHasStartedAlready = false\n\n      const quit = (code = 0) => {\n        if (this.stopServer) {\n          this.stopServer()\n        }\n\n        process.exit(code)\n      }\n\n      const receiveMessageFromWorker = message => {\n        if (message && message.workerStatus === 'starting') {\n          if (!firstWorkerHasStartedAlready) {\n            firstWorkerHasStartedAlready = true\n          } else {\n            print('info', '*** restarted worker process ***')\n            this.stats.track('bot', 'restarted')\n          }\n        } else if (message.type === 'exit') {\n          quit()\n        }\n      }\n\n      cluster.on('exit', (worker, code /* , signal */) => {\n        if (code === RESTART_EXIT_CODE) {\n          cluster.fork().on('message', receiveMessageFromWorker)\n        } else {\n          quit(code)\n        }\n      })\n\n      if (!this.botfile.disableClusterMode) {\n        cluster.fork().on('message', receiveMessageFromWorker)\n      }\n    }\n\n    if (cluster.isWorker) {\n      process.send && process.send({ workerStatus: 'starting' })\n      this._start().catch(err => {\n        print('error', 'Error starting botpress: ', err.message, err.stack)\n      })\n    }\n  }\n\n  restart(interval = 0) {\n    setTimeout(() => {\n      process.exit(RESTART_EXIT_CODE)\n    }, interval)\n  }\n\n  _setupEnv() {\n    const envPath = path.resolve(this.projectLocation, '.env')\n    if (fs.existsSync(envPath)) {\n      const envConfig = dotenv.parse(fs.readFileSync(envPath))\n      for (const k in envConfig) {\n        if (_.isNil(process.env[k]) || process.env.ENV_OVERLOAD) {\n          process.env[k] = envConfig[k]\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = botpress\n"]}