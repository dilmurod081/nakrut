{"version":3,"sources":["../../src/cli/auth.js"],"names":["AUTH_FILE","getDataDir","projectPath","path","resolve","botfile","join","fs","existsSync","util","print","error","chalk","bold","process","exit","bf","require","getDataLocation","dataDir","getCloudAuthFile","os","homedir","getAuthFile","readJsonFile","file","json","readFileSync","JSON","parse","err","code","warn","message","writeJsonFile","content","mkdirp","sync","dirname","writeFileSync","stringify","readBotAuth","readCloudAuth","writeBotAuth","auth","writeCloudAuth","AUTH_DISABLED","refreshToken","botUrl","token","response","axios","request","url","method","headers","Authorization","data","doRootLogin","kind","schema","properties","user","description","white","required","password","hidden","prompt","delimiter","start","Promise","fromCallback","get","cb","result","post","success","Error","reason","doCloudLogin","botInfo","userAuthUrl","endpoint","loginUrl","botId","botEnv","cloudAuth","apiToken","startsWith","authorization","msg","doLogin","res","type","exports","login","replace","validUrl","isUri","info","logout","Confirm","run","then","answer"],"mappings":"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","file":"auth.js","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport Promise from 'bluebird'\nimport prompt from 'prompt'\nimport chalk from 'chalk'\nimport validUrl from 'valid-url'\nimport axios from 'axios'\nimport Confirm from 'prompt-confirm'\nimport mkdirp from 'mkdirp'\nimport os from 'os'\nimport get from 'lodash/get'\n\nimport util from '../util'\n\nconst AUTH_FILE = '.auth.json'\n\n// TODO: this part replicates `start.js`, refactor later\nconst getDataDir = () => {\n  const projectPath = path.resolve('.')\n\n  const botfile = path.join(projectPath, 'botfile.js')\n  if (!fs.existsSync(botfile)) {\n    util.print.error(`(fatal) No ${chalk.bold('botfile.js')} file found at: ` + botfile)\n    process.exit(1)\n  }\n\n  const bf = require(botfile)\n  return util.getDataLocation(bf.dataDir, projectPath)\n}\n\nconst getCloudAuthFile = () => path.join(os.homedir(), '.botpress', AUTH_FILE)\nconst getAuthFile = () => path.join(getDataDir(), AUTH_FILE)\n\nconst readJsonFile = file => {\n  try {\n    const json = fs.readFileSync(file, 'utf-8')\n    return JSON.parse(json)\n  } catch (err) {\n    if (err.code !== 'ENOENT') {\n      util.print.warn(err.message || 'Unknown error', `while reading ${file}.`)\n    }\n  }\n  return {}\n}\n\nconst writeJsonFile = (file, content) => {\n  mkdirp.sync(path.dirname(file))\n  fs.writeFileSync(file, JSON.stringify(content, null, 2))\n}\n\nconst readBotAuth = () => readJsonFile(getAuthFile())\nconst readCloudAuth = () => readJsonFile(getCloudAuthFile())\nconst writeBotAuth = auth => writeJsonFile(getAuthFile(), auth)\nconst writeCloudAuth = auth => writeJsonFile(getCloudAuthFile(), auth)\n\nconst AUTH_DISABLED = '[AUTH DISABLED]'\n\nconst refreshToken = async botUrl => {\n  const auth = readBotAuth()\n  const token = auth[botUrl]\n\n  // this method is only called if the auth is enabled\n  // in which case it doesn't make sense even to try refreshing the fake token\n  // we might have saved before when the auth was disabled on this server\n  if (!token || token === AUTH_DISABLED) {\n    return\n  }\n\n  try {\n    const response = await axios.request({\n      url: `${botUrl}/api/auth/refresh_token`,\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    })\n    return response.data\n  } catch (err) {\n    return null\n  }\n}\n\nconst doRootLogin = async botUrl => {\n  // try refreshing token before attempting the new login\n  const token = await refreshToken(botUrl)\n  if (token) {\n    return { token, kind: 'refresh' }\n  }\n\n  const schema = {\n    properties: {\n      user: {\n        description: chalk.white('User:'),\n        required: true\n      },\n      password: {\n        description: chalk.white('Password:'),\n        hidden: true,\n        required: true\n      }\n    }\n  }\n\n  prompt.message = ''\n  prompt.delimiter = ''\n  prompt.start()\n\n  const { user, password } = await Promise.fromCallback(cb => prompt.get(schema, cb))\n  const result = await axios.post(`${botUrl}/api/login`, { user, password })\n\n  if (result.data.success) {\n    return { token: result.data.token, kind: 'login' }\n  }\n  throw new Error(result.data.reason)\n}\n\nconst doCloudLogin = async (botUrl, botInfo) => {\n  const userAuthUrl = `${botInfo.endpoint}/me/cli`\n  const loginUrl = `${botInfo.endpoint}/api/login/bot/${botInfo.botId}/${botInfo.botEnv}`\n\n  const cloudAuth = readCloudAuth()\n\n  if (!cloudAuth[botInfo.endpoint]) {\n    const schema = {\n      properties: {\n        token: {\n          description: chalk.white('API Token:'),\n          required: true\n        }\n      }\n    }\n\n    prompt.message = `You need to authenticate using Botpress Cloud for this bot.\\r\\nPlease visit ${userAuthUrl} and copy/paste your API token here.\\r\\n`\n    prompt.delimiter = ''\n    prompt.start()\n    const { token: apiToken } = await Promise.fromCallback(cb => prompt.get(schema, cb))\n\n    if (!apiToken.startsWith('cli__')) {\n      throw new Error('Invalid API Token, expected token starting with \"cli__\"')\n    }\n\n    cloudAuth[botInfo.endpoint] = apiToken\n    writeCloudAuth(cloudAuth)\n  }\n\n  try {\n    const authorization = `Bearer ${cloudAuth[botInfo.endpoint]}`\n    const { data } = await axios.get(loginUrl, { headers: { authorization } })\n    return { token: get(data, 'payload.token'), kind: 'refresh' }\n  } catch (err) {\n    delete cloudAuth[botInfo.endpoint]\n    writeCloudAuth(cloudAuth)\n    const msg = get(err, 'response.data.message') || err.message\n    throw new Error('Could not authenticate to bot using Botpress Cloud, please try again. (' + msg + ')')\n  }\n}\n\nconst doLogin = async botUrl => {\n  const res = await axios.get(`${botUrl}/api/auth/info`)\n\n  const data = res.data || {}\n\n  if (!data.type === 'none') {\n    return { token: AUTH_DISABLED, kind: 'no-auth' }\n  } else if (data.type === 'cloud') {\n    return doCloudLogin(botUrl, data)\n  } else if (data.type === 'root') {\n    return doRootLogin(botUrl)\n  } else {\n    throw new Error('Unknown login type: ' + data.type)\n  }\n}\n\nexports.login = async botUrl => {\n  botUrl = botUrl.replace(/\\/+$/, '')\n\n  if (!validUrl.isUri(botUrl)) {\n    util.print.error(`Doesn't look like valid URL: ${botUrl}`)\n    return\n  }\n\n  try {\n    const { token, kind } = await doLogin(botUrl)\n    const auth = readBotAuth()\n    auth[botUrl] = token\n    writeBotAuth(auth)\n    if (kind === 'login') {\n      util.print.success(`Logged in successfully. Auth token saved in ${getAuthFile()}.`)\n    } else if (kind === 'refresh') {\n      util.print.success(`Auth token refreshed and saved in ${getAuthFile()}.`)\n    } else if (kind === 'no-auth') {\n      util.print.info(`Auth is disabled at ${botUrl}, no need to login.`)\n    }\n    return token\n  } catch (err) {\n    util.print.error(err.message || 'Unknown')\n    return\n  }\n}\n\nexports.logout = botUrl => {\n  if (!botUrl) {\n    new Confirm(\"You're about to delete all saved auth tokens in the current folder. Are you sure?\")\n      .run()\n      .then(answer => {\n        if (!answer) {\n          return\n        }\n        writeBotAuth({})\n        writeCloudAuth({})\n      })\n\n    return\n  }\n\n  botUrl = botUrl.replace(/\\/+$/, '')\n  const auth = readBotAuth()\n  if (!auth[botUrl]) {\n    util.print.warn(`No saved token for ${botUrl}, nothing to do.`)\n    return\n  }\n\n  delete auth[botUrl]\n  writeBotAuth(auth)\n  util.print.success('Logged out successfully.')\n}\n"]}