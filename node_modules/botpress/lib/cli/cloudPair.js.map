{"version":3,"sources":["../../src/cli/cloudPair.js"],"names":["hostnameRegex","module","exports","token","options","opts","projectPath","path","resolve","endpoint","length","print","error","test","filePath","fs","existsSync","packagePath","name","description","require","pairUrl","data","axios","post","botId","teamId","payload","content","writeFileSync","JSON","stringify","err","message","_","get","success"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;;;AAEA,MAAMA,gBAAgB,wHAAtB;;AAEAC,OAAOC,OAAP;AAAA,+BAAiB,WAAOC,KAAP,EAAcC,OAAd,EAA0B;AACzC,UAAMC,OAAOD,QAAQC,IAAR,EAAb;AACA,UAAMC,cAAcC,eAAKC,OAAL,CAAa,GAAb,CAApB;AACA,UAAMC,WAAWJ,KAAKI,QAAtB;;AAEA,QAAI,CAACN,KAAD,IAAU,CAACA,MAAMO,MAArB,EAA6B;AAC3B,aAAOC,YAAMC,KAAN,CAAY,4EAAZ,CAAP;AACD;;AAED,QAAI,CAACZ,cAAca,IAAd,CAAmBJ,QAAnB,CAAL,EAAmC;AACjC,aAAOE,YAAMC,KAAN,CACJ,sBAAqBH,QAAS,sFAD1B,CAAP;AAGD;;AAED,UAAMK,WAAWP,eAAKC,OAAL,CAAaF,WAAb,EAA0B,eAA1B,CAAjB;;AAEA,QAAIS,aAAGC,UAAH,CAAcF,QAAd,CAAJ,EAA6B;AAC3B,aAAOH,YAAMC,KAAN,CACJ,qHAAoHE,QAAS,GADzH,CAAP;AAGD;;AAED,UAAMG,cAAcV,eAAKC,OAAL,CAAaF,WAAb,EAA0B,cAA1B,CAApB;;AAEA,QAAI,CAACS,aAAGC,UAAH,CAAcC,WAAd,CAAL,EAAiC;AAC/B,aAAON,YAAMC,KAAN,CAAa,gGAAb,CAAP;AACD;;AAED,UAAM,EAAEM,IAAF,EAAQC,WAAR,KAAwBC,QAAQH,WAAR,CAA9B,CA7ByC,CA6BU;;AAEnD,UAAMI,UAAW,GAAEZ,QAAS,cAA5B;;AAEA,QAAI;AACF,YAAM,EAAEa,IAAF,KAAW,MAAMC,gBAAMC,IAAN,CAAWH,OAAX,EAAoB,EAAElB,KAAF,EAASe,IAAT,EAAeC,WAAf,EAApB,CAAvB;;AAEA,YAAM,EAAEM,KAAF,EAASC,MAAT,KAAoBJ,KAAKK,OAA/B;;AAEA,YAAMC,UAAU;AACdH,aADc;AAEdC,cAFc;AAGdvB,aAHc;AAIdM;AAJc,OAAhB;;AAOAM,mBAAGc,aAAH,CAAiBf,QAAjB,EAA2BgB,KAAKC,SAAL,CAAeH,OAAf,EAAwB,IAAxB,EAA8B,CAA9B,CAA3B,EAA6D,MAA7D;AACD,KAbD,CAaE,OAAOI,GAAP,EAAY;AACZ,YAAMC,UAAUC,iBAAEC,GAAF,CAAMH,GAAN,EAAW,uBAAX,KAAuCA,IAAIC,OAA3C,IAAsD,eAAtE;AACA,aAAOtB,YAAMC,KAAN,CAAa,4BAA2BqB,OAAQ,GAAhD,CAAP;AACD;;AAEDtB,gBAAMyB,OAAN,CAAc,yBAAd;AACD,GApDD;;AAAA;AAAA;AAAA;AAAA","file":"cloudPair.js","sourcesContent":["import path from 'path'\nimport fs from 'fs'\nimport axios from 'axios'\nimport { print } from '../util'\nimport _ from 'lodash'\n\nconst hostnameRegex = /^(http|https):\\/\\/(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9]).)*([A-Za-z]|[A-Za-z][A-Za-z0-9-]*[A-Za-z0-9])(:\\d+)?$/gi\n\nmodule.exports = async (token, options) => {\n  const opts = options.opts()\n  const projectPath = path.resolve('.')\n  const endpoint = opts.endpoint\n\n  if (!token || !token.length) {\n    return print.error('Please provide a valid token. e.g. \"botpress cloud-pair your-secret-token\"')\n  }\n\n  if (!hostnameRegex.test(endpoint)) {\n    return print.error(\n      `Invalid endpoint: \"${endpoint}\". Endpoint must start with 'http' or 'https' and must not contain a trailing slash.`\n    )\n  }\n\n  const filePath = path.resolve(projectPath, 'bp-cloud.json')\n\n  if (fs.existsSync(filePath)) {\n    return print.error(\n      `This bot is already paired with Botpress Cloud. If you believe this is an error, delete this file and try again: \"${filePath}\"`\n    )\n  }\n\n  const packagePath = path.resolve(projectPath, 'package.json')\n\n  if (!fs.existsSync(packagePath)) {\n    return print.error(`This does not look like a valid project root. Please run this command at the root of your bot.`)\n  }\n\n  const { name, description } = require(packagePath) // eslint-disable-line\n\n  const pairUrl = `${endpoint}/api/pairing`\n\n  try {\n    const { data } = await axios.post(pairUrl, { token, name, description })\n\n    const { botId, teamId } = data.payload\n\n    const content = {\n      botId,\n      teamId,\n      token,\n      endpoint\n    }\n\n    fs.writeFileSync(filePath, JSON.stringify(content, null, 2), 'utf8')\n  } catch (err) {\n    const message = _.get(err, 'response.data.message') || err.message || 'Unknown error'\n    return print.error(`Failed to pair the bot: \"${message}\"`)\n  }\n\n  print.success('Bot paired successfully')\n}\n"]}