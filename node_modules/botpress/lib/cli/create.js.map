{"version":3,"sources":["../../src/cli/create.js"],"names":["introductionText","chalk","nextStepText","invalidDirectoryError","templateNotFoundError","template","copyingFile","name","assertDoesntExist","file","fs","existsSync","console","log","process","exit","loadTemplate","templatePath","path","join","__dirname","files","Promise","fromCallback","cwd","dot","cb","_","reduce","obj","filePath","readFileSync","toString","generate","result","content","Object","entries","compiled","interpolate","directory","dirname","length","mkdirp","sync","writeFileSync","module","exports","moduleDirectory","resolve","basename","track","each","schema","properties","description","white","pattern","message","required","default","author","prompt","delimiter","start","get","err"],"mappings":"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","file":"create.js","sourcesContent":["import { spawn } from 'child_process'\nimport prompt from 'prompt'\nimport chalk from 'chalk'\nimport path from 'path'\nimport mkdirp from 'mkdirp'\nimport _ from 'lodash'\nimport fs from 'fs'\nimport glob from 'glob'\nimport Promise from 'bluebird'\n\nimport stats from '../stats'\n\nconst introductionText = chalk`\n{dim ---------------}\nThis tool will bootstrap a new {bold Botpress} module for you.\nFor more information or help, please visit {underline https://botpress.io/docs}\n{dim ---------------}`\n\nconst nextStepText = chalk`\n{green ðŸŽ‰  Your module was successfully bootstraped!}\n\n{yellow Next steps:}\n  {yellow 1)} Install the dependencies by running {bold npm install} (or {bold yarn install})\n  {yellow 2)} Compile the module using {bold npm run compile} (or {bold yarn run compile})\n  {yellow 3)} Link the module to ease development and testing using {bold npm link}\n  {yellow 4)} Install the module in your testing bot using {bold npm install --save path/to/the/module}\n  {yellow 5)} Link the module using {bold npm link MODULE-NAME}\n\n{bold Enjoy Botpress!}\n`\n\nconst invalidDirectoryError = chalk`\n{red Fatal Error} You need to run this command in an empty directory.\n`\n\nconst templateNotFoundError = template => chalk`\n{red Fatal Error} Template {bold ${template}} not found.\n`\n\nconst copyingFile = name => chalk`{dim -> Copying ${name}}`\n\nconst assertDoesntExist = file => {\n  if (fs.existsSync(file)) {\n    console.log(invalidDirectoryError)\n    process.exit(1)\n  }\n}\n\n/**\n * Loads a template a returns a map of files and content\n * @param  {string} name The name of the template to load\n * @return {object} A map of files `{ path: content }``\n * @private\n */\nconst loadTemplate = async name => {\n  const templatePath = path.join(__dirname, 'templates', name)\n\n  if (!fs.existsSync) {\n    console.log(templateNotFoundError(name))\n    process.exit(1)\n  }\n\n  const files = await Promise.fromCallback(cb => glob('**/*.*', { cwd: templatePath, dot: true }, cb))\n\n  return _.reduce(\n    files,\n    (obj, file) => {\n      const filePath = path.join(templatePath, file)\n      obj[file] = fs.readFileSync(filePath).toString()\n      return obj\n    },\n    {}\n  )\n}\n\nconst generate = async result => {\n  const files = await loadTemplate('create-default')\n\n  for (const [name, content] of Object.entries(files)) {\n    console.log(copyingFile(name))\n    const compiled = _.template(content, { interpolate: /<%=([\\s\\S]+?)%>/g })\n    const directory = path.dirname(name)\n    if (directory.length) {\n      mkdirp.sync(directory)\n    }\n\n    fs.writeFileSync(name, compiled(result))\n  }\n\n  console.log(nextStepText)\n}\n\nmodule.exports = () => {\n  console.log(introductionText)\n\n  const moduleDirectory = path.resolve('.')\n  const dirname = path.basename(moduleDirectory)\n\n  stats({}).track('cli', 'modules', 'create')\n\n  _.each(['package.json', 'botfile.js', 'index.js'], assertDoesntExist)\n\n  const schema = {\n    properties: {\n      name: {\n        description: chalk.white('module name:'),\n        pattern: /^(\\@botpress\\/|botpress-)[a-z0-9][a-z0-9-_\\.]+$/,\n        message: `Name must be only lowercase letters, digits, dashes, underscores and dots.\nIt must also start with \"@botpress/\" or \"botpress-\"`,\n        required: true,\n        default: dirname\n      },\n      description: {\n        required: false,\n        description: chalk.white('description:')\n      },\n      author: {\n        required: false,\n        description: chalk.white('author:')\n      }\n    }\n  }\n\n  prompt.message = ''\n  prompt.delimiter = ''\n  prompt.start()\n\n  prompt.get(schema, (err, result) => {\n    generate(result)\n  })\n}\n"]}