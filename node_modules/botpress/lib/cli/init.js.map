{"version":3,"sources":["../../src/cli/init.js"],"names":["introductionText","chalk","nextStepText","invalidDirectoryError","dirExistsError","dir","templateNotFoundError","template","showTemplateInfo","info","name","author","description","channels","join","copyingFile","assertDoesntExist","file","fs","existsSync","console","log","process","exit","loadTemplate","templatePath","path","__dirname","files","Promise","fromCallback","cwd","dot","cb","_","reduce","obj","filePath","readFileSync","toString","generate","result","hasNpmignore","JSON","parse","content","Object","entries","compiled","interpolate","directory","dirname","length","mkdirp","sync","writeFileSync","module","exports","dirName","yes","mkdirSync","chdir","botpressVersion","require","version","track","each","defaultBotName","basename","resolve","schema","properties","white","pattern","message","required","default","prompt","delimiter","start","get","err","error"],"mappings":"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","file":"init.js","sourcesContent":["import prompt from 'prompt'\nimport chalk from 'chalk'\nimport path from 'path'\nimport mkdirp from 'mkdirp'\nimport _ from 'lodash'\nimport fs from 'fs'\nimport glob from 'glob'\nimport Promise from 'bluebird'\n\nimport stats from '../stats'\n\nconst introductionText = chalk`\n{dim ---------------}\nHey there ðŸ‘‹, thanks for using {bold Botpress}!\nWe'll walk you through the creation of your new bot.\nFor more information or help, please visit {underline https://botpress.io/docs}\n{dim ---------------}`\n\nconst nextStepText = chalk`\n{green ðŸŽ‰  Your bot was initialized succesfully!}\n\n{yellow Next steps:}\n  {yellow 1)} Install bot dependencies by running {bold npm install} (or {bold yarn install})\n  {yellow 2)} Start the bot by running {bold npm start} (or {bold yarn start})\n\n{bold Enjoy Botpress!}\n`\n\nconst invalidDirectoryError = chalk`\n{red Fatal Error} You need to run this command in an empty directory.\n`\n\nconst dirExistsError = dir => chalk`\n{red Fatal Error} Directory {bold ${dir}} already exists.\n`\n\nconst templateNotFoundError = template => chalk`\n{red Fatal Error} Template {bold ${template}} not found.\n`\n\nconst showTemplateInfo = info => chalk`\n{dim =============================}\nTemplate: {bold ${info.name}}\nAuthor: {dim ${info.author}}\nDescription: {dim ${info.description}}\nChannels: {yellow ${info.channels.join(', ')}}\n{dim =============================}\n`\n\nconst copyingFile = name => chalk`{dim -> Copying ${name}}`\n\nconst assertDoesntExist = file => {\n  if (fs.existsSync(file)) {\n    console.log(invalidDirectoryError)\n    process.exit(1)\n  }\n}\n\n// Show template description\n// Say more templates coming up\n// Ask questions\n// Copy files, replacing variables\n// Show \"success, now run `yarn install`\"\n\n/**\n * Loads a template a returns a map of files and content\n * @param  {string} name The name of the template to load\n * @return {object} A map of files `{ path: content }``\n * @private\n */\nconst loadTemplate = async name => {\n  const templatePath = path.join(__dirname, 'templates', name)\n\n  if (!fs.existsSync) {\n    console.log(templateNotFoundError(name))\n    process.exit(1)\n  }\n\n  const files = await Promise.fromCallback(cb => glob('**/*.*', { cwd: templatePath, dot: true }, cb))\n\n  return _.reduce(\n    files,\n    (obj, file) => {\n      const filePath = path.join(templatePath, file)\n      obj[file] = fs.readFileSync(filePath).toString()\n      return obj\n    },\n    {}\n  )\n}\n\nconst generate = async result => {\n  const files = await loadTemplate('init-default')\n  const hasNpmignore = files['.npmignore']\n\n  const info = JSON.parse(files['info.json'])\n  delete files['info.json']\n\n  if (hasNpmignore) {\n    // Npm renames .gitignore into .npmignore while publishing package which we need to revert\n    // See https://github.com/npm/npm/wiki/Files-and-Ignores#details-1 for more details\n    files['.gitignore'] = hasNpmignore\n    delete files['.npmignore']\n  }\n\n  console.log(showTemplateInfo(info))\n\n  for (const [name, content] of Object.entries(files)) {\n    console.log(copyingFile(name))\n    const compiled = _.template(content, { interpolate: /<%=([\\s\\S]+?)%>/g })\n    const directory = path.dirname(name)\n    if (directory.length) {\n      mkdirp.sync(directory)\n    }\n\n    fs.writeFileSync(name, compiled(result))\n  }\n\n  console.log(nextStepText)\n}\n\nmodule.exports = async (dirName, { yes }) => {\n  console.log(introductionText)\n\n  // People can optionally provide the directory of the bot\n  // Like \"bp init my-bot\"\n  if (dirName) {\n    if (!fs.existsSync(dirName)) {\n      fs.mkdirSync(dirName)\n      process.chdir(dirName)\n    } else {\n      console.log(dirExistsError(dirName))\n      return process.exit(1)\n    }\n  }\n\n  // Loaded by Webpack at bundle time\n  const botpressVersion = require('../../package.json').version\n\n  stats({}).track('cli', 'bot', 'init')\n\n  _.each(['package.json', 'botfile.js', 'index.js'], assertDoesntExist)\n\n  // The name of the current directory\n  const defaultBotName = path.basename(path.resolve('./'))\n\n  const schema = {\n    properties: {\n      name: {\n        description: chalk.white('name:'),\n        pattern: /^[a-z0-9][a-z0-9-_\\.]+$/,\n        message: 'name must be only lowercase letters, ' + 'digits, dashes, underscores and dots.',\n        required: true,\n        default: defaultBotName\n      },\n      version: {\n        required: true,\n        description: chalk.white('botpress version:'),\n        default: botpressVersion\n      },\n      description: {\n        required: false,\n        description: chalk.white('description:')\n      },\n      author: {\n        required: false,\n        description: chalk.white('author:')\n      }\n    }\n  }\n\n  if (yes) {\n    generate({\n      name: defaultBotName,\n      version: botpressVersion,\n      description: '',\n      author: ''\n    })\n  } else {\n    prompt.message = ''\n    prompt.delimiter = ''\n    prompt.start()\n\n    prompt.get(schema, (err, result) => {\n      if (err) {\n        if (err.message !== 'canceled') {\n          console.error(err)\n        }\n\n        process.exit(1)\n      }\n\n      generate(result)\n    })\n  }\n}\n"]}