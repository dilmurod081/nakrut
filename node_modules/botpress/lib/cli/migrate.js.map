{"version":3,"sources":["../../src/cli/migrate.js"],"names":["module","exports","fromVersion","track","fs","existsSync","Error","files","_","sortBy","require","context","keys","x","toApply","filter","f","test","parseFloat","replace","Promise","mapSeries","file","migration","path","resolve","then","util","print","finally","process","exit"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEAA,OAAOC,OAAP,GAAiBC,eAAe;AAC9B,uBAAM,EAAN,EAAUC,KAAV,CAAgB,KAAhB,EAAuB,WAAvB,EAAoCD,WAApC;;AAEA,MAAI,CAACE,aAAGC,UAAH,CAAc,cAAd,CAAL,EAAoC;AAClC,UAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACD;;AAED,QAAMC,QAAQC,iBAAEC,MAAF,CAASC,QAAQC,OAAR,CAAgB,eAAhB,EAAiCC,IAAjC,EAAT,EAAkDC,KAAKA,CAAvD,CAAd;;AAEA,QAAMC,UAAUN,iBAAEO,MAAF,CAASR,KAAT,EAAgBS,KAAK;AACnC,QAAI,CAAC,QAAQC,IAAR,CAAaD,CAAb,CAAL,EAAsB;AACpB,aAAO,KAAP;AACD;;AAED,WAAOE,WAAWhB,WAAX,IAA0BgB,WAAWF,EAAEG,OAAF,CAAU,OAAV,EAAmB,EAAnB,CAAX,CAAjC;AACD,GANe,CAAhB;;AAQA,SAAOC,mBAAQC,SAAR,CAAkBP,OAAlB,EAA2BQ,QAAQ;AACxC,UAAMC,YAAYb,QAAQ,kBAAkBY,IAA1B,CAAlB;AACA,WAAOC,UAAUC,eAAKC,OAAL,CAAa,GAAb,CAAV,EAA6BC,IAA7B,CAAkC,MAAM;AAC7CC,qBAAKC,KAAL,CAAW,SAAX,EAAuB,aAAYN,KAAKH,OAAL,CAAa,KAAb,EAAoB,EAApB,CAAwB,uBAA3D;AACD,KAFM,CAAP;AAGD,GALM,EAKJU,OALI,CAKI,MAAM;AACfF,mBAAKC,KAAL,CAAW,SAAX,EAAsB,sBAAtB;AACAE,YAAQC,IAAR,CAAa,CAAb;AACD,GARM,CAAP;AASD,CA1BD","file":"migrate.js","sourcesContent":["import util from '../util'\nimport stats from '../stats'\nimport fs from 'fs'\nimport path from 'path'\nimport _ from 'lodash'\nimport Promise from 'bluebird'\n\nmodule.exports = fromVersion => {\n  stats({}).track('cli', 'migration', fromVersion)\n\n  if (!fs.existsSync('./botfile.js')) {\n    throw new Error('You must be inside a bot directory to run a migration')\n  }\n\n  const files = _.sortBy(require.context('./migrations/').keys(), x => x)\n\n  const toApply = _.filter(files, f => {\n    if (!/.js$/i.test(f)) {\n      return false\n    }\n\n    return parseFloat(fromVersion) < parseFloat(f.replace(/\\.js/i, ''))\n  })\n\n  return Promise.mapSeries(toApply, file => {\n    const migration = require('./migrations/' + file)\n    return migration(path.resolve('.')).then(() => {\n      util.print('success', `Migration ${file.replace('.js', '')} applied successfully`)\n    })\n  }).finally(() => {\n    util.print('success', 'Migration completed.')\n    process.exit(0)\n  })\n}\n"]}