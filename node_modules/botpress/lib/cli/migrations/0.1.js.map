{"version":3,"sources":["../../../src/cli/migrations/0.1.js"],"names":["dropTableIfExists","knex","tableName","schema","hasTable","then","has","dropTable","migrate_database_schema","dbLocation","updateUsers","client","connection","filename","useNullAsDefault","table","string","update","created_on","raw","rows","util","print","catch","bootstrap","process","env","DELETE_TABLES","migrate_botfile","botfilePath","before","fs","readFileSync","toString","indexOf","after","replace","writeFileSync","module","exports","bot_path","path","join","botfile","require","resolve","dataDir"],"mappings":"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","file":"0.1.js","sourcesContent":["import Knex from 'knex'\nimport path from 'path'\nimport fs from 'fs'\n\nimport kvs from '../../database/kvs'\nimport util from '../../util'\n\nfunction dropTableIfExists(knex, tableName) {\n  return knex.schema.hasTable(tableName).then(has => {\n    if (has) {\n      return knex.schema.dropTable(tableName)\n    }\n  })\n}\n\nfunction migrate_database_schema(dbLocation) {\n  const updateUsers = `strftime('%Y-%m-%dT%H:%M:%fZ', created_on/1000, 'unixepoch')`\n\n  const knex = Knex({\n    client: 'sqlite3',\n    connection: { filename: dbLocation },\n    useNullAsDefault: true\n  })\n\n  return knex.schema\n    .table('users', function(table) {\n      table.string('picture_url')\n      table.string('first_name')\n      table.string('last_name')\n    })\n    .then(() => knex('users').update({ created_on: knex.raw(updateUsers) }))\n    .then(rows => {\n      util.print('info', 'Updated ' + rows + ' users')\n      util.print(\n        'warn',\n        'Users table was migrated to new schema but existing ' +\n          'users will miss the following fields: `picture_url`, `first_name`, ' +\n          '`last_name`. They have been left to `null`.'\n      )\n    })\n    .catch(() => {\n      util.print('warn', 'Did not migrate table `users` as schema was already up to date')\n    })\n    .then(() => kvs(knex).bootstrap())\n    .catch(() => {\n      util.print('warn', 'Did not create table `kvs` as schema was already up to date')\n    })\n    .then(() => {\n      if (!process.env.DELETE_TABLES) {\n        util.print(\n          'warn',\n          'This migration must delete the tables of ' +\n            'the following modules: `botpress-scheduler`, `botpress-analytics`, ' +\n            '`botpress-hitl` and `botpress-subscription`.'\n        )\n\n        util.print(\n          'warn',\n          \"This step has been skipped because you didn't provide \" + 'the DELETE_TABLES=true environement variable.'\n        )\n\n        util.print('warn', 'Please backup your data if necessary then re-run with DELETE_TABLES=true')\n        return false\n      }\n\n      return dropTableIfExists(knex, 'analytics_interactions')\n        .then(() => dropTableIfExists(knex, 'analytics_runs'))\n        .then(() => dropTableIfExists(knex, 'broadcast_outbox'))\n        .then(() => dropTableIfExists(knex, 'broadcast_schedules'))\n        .then(() => dropTableIfExists(knex, 'hitl_messages'))\n        .then(() => dropTableIfExists(knex, 'hitl_sessions'))\n        .then(() => dropTableIfExists(knex, 'subscription_users'))\n        .then(() => dropTableIfExists(knex, 'subscriptions'))\n        .then(() => dropTableIfExists(knex, 'scheduler_schedules'))\n        .then(() => dropTableIfExists(knex, 'scheduler_tasks'))\n        .then(() => util.print('info', 'Dropped module tables'))\n    })\n}\n\nfunction migrate_botfile(botfilePath) {\n  const before = fs.readFileSync(botfilePath).toString()\n\n  if (before.indexOf('postgres:') >= 0) {\n    util.print(\n      'warn',\n      'Did not migrate botfile as it seemed like `postgres`' +\n        ' was already present. Please migrate manually if this is a mistake.'\n    )\n    return false\n  }\n\n  const after = before.replace(\n    /module\\.exports.*?=.*?{/i,\n    `module.exports = {\n\n  /**\n  * Postgres configuration\n  */\n  postgres: {\n    enabled: process.env.DATABASE === 'postgres',\n    host: process.env.PG_HOST || '127.0.0.1',\n    port: process.env.PG_PORT || 5432,\n    user: process.env.PG_USER || '',\n    password: process.env.PG_PASSWORD || '',\n    database: process.env.PG_DB || ''\n  },`\n  )\n\n  fs.writeFileSync(botfilePath, after)\n\n  util.print('info', 'Updated botfile')\n}\n\nmodule.exports = bot_path => {\n  const botfilePath = path.join(bot_path, 'botfile.js')\n  const botfile = require(botfilePath)\n  const dbLocation = path.resolve(path.join(bot_path, botfile.dataDir, 'db.sqlite'))\n\n  return migrate_database_schema(dbLocation).then(() => migrate_botfile(botfilePath))\n}\n"]}