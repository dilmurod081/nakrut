'use strict';

var _promptConfirm = require('prompt-confirm');

var _promptConfirm2 = _interopRequireDefault(_promptConfirm);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _child_process = require('child_process');

var _util = require('../util');

var _modules = require('../modules');

var _modules2 = _interopRequireDefault(_modules);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

module.exports = (() => {
  var _ref = _asyncToGenerator(function* (version) {
    version = version || 'latest';

    const modulesManager = (0, _modules2.default)(null, './', null);
    const packages = ['botpress', ...modulesManager.listInstalled()];

    let cmdRest = '';

    for (const pkg of packages) {
      const confirm = yield new _promptConfirm2.default(_chalk2.default`
Do you want to update {yellow "${pkg}"} to version {underline ${version}}?`).run();
      if (confirm) {
        cmdRest += `${pkg}@${version} `;
      }
    }

    if (cmdRest.length) {
      console.log(_chalk2.default`===> {underline Installing dependencies, please wait...}`);

      if (_fs2.default.existsSync(_path2.default.resolve('./yarn.lock'))) {
        (0, _child_process.execSync)(`yarn add ${cmdRest}`);
      } else {
        (0, _child_process.execSync)(`npm install --save ${cmdRest}`);
      }

      console.log(_chalk2.default`{green.bold Done!}`);
    }
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})();
//# sourceMappingURL=update.js.map