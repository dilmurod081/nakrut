{"version":3,"sources":["../../src/cloud/index.js"],"names":["module","exports","projectLocation","botfile","logger","certificate","endpoint","getCloudEndpoint","data","axios","get","length","debug","_getWellKnownRSACert","isPaired","token","getPairingInfo","env","botUrl","put","then","catch","message","_","err","error","updateRemoteEnv","rolesPromise","botId","headers","Authorization","payload","_getRemoteRoles","roleNames","roles","reduce","acc","roleName","role","find","name","rules","getUserRoles","setInterval","_readCloudfile","filePath","path","resolve","fs","existsSync","Error","JSON","parse","readFileSync","pick","getBotEnv","getCertificate"],"mappings":"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","file":"index.js","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport axios from 'axios'\nimport ms from 'ms'\nimport _ from 'lodash'\n\nmodule.exports = ({ projectLocation, botfile, logger }) => {\n  let certificate = null\n  let rolesPromise = null\n\n  setInterval(() => (certificate = null), ms('5 minutes'))\n  setInterval(() => (rolesPromise = null), ms('5 minutes'))\n\n  function _readCloudfile() {\n    const filePath = path.resolve(projectLocation, 'bp-cloud.json')\n    if (!fs.existsSync(filePath)) {\n      throw new Error(\n        'Could not find `bp-cloud.json` file at project root. Have you run \"botpress cloud-pair\" command?'\n      )\n    }\n\n    return JSON.parse(fs.readFileSync(filePath, 'utf8'))\n  }\n\n  function getCloudEndpoint() {\n    return _readCloudfile().endpoint\n  }\n\n  function getPairingInfo() {\n    return _.pick(_readCloudfile(), ['botId', 'endpoint', 'token', 'teamId'])\n  }\n\n  function isPaired() {\n    const filePath = path.resolve(projectLocation, 'bp-cloud.json')\n    return fs.existsSync(filePath)\n  }\n\n  function getBotEnv() {\n    return botfile.env\n  }\n\n  async function _getWellKnownRSACert() {\n    if (certificate) {\n      return certificate\n    }\n\n    const endpoint = getCloudEndpoint()\n    const { data } = await axios.get(endpoint + '/api/.well-known/public.key')\n\n    if (data && data.length) {\n      certificate = data\n    }\n\n    logger.debug('[Cloud] Updated certificates')\n\n    return data\n  }\n\n  async function updateRemoteEnv() {\n    if (!isPaired()) {\n      return\n    }\n\n    const { token, endpoint } = getPairingInfo()\n    const { env, botUrl } = botfile\n\n    await axios\n      .put(endpoint + '/api/pairing/env', {\n        botUrl,\n        token,\n        env\n      })\n      .then(() => {\n        logger.debug('[Cloud] Updated environment: ' + env)\n      })\n      .catch(err => {\n        const message = _.get(err, 'response.data.message') || err.message || 'Unknown error'\n        logger.error('[Cloud] Could not update environment: ' + message)\n      })\n  }\n\n  async function _getRemoteRoles() {\n    if (!isPaired()) {\n      return\n    }\n\n    if (rolesPromise) {\n      return rolesPromise\n    }\n\n    const { endpoint, token, botId } = getPairingInfo()\n\n    rolesPromise = axios\n      .get(`${endpoint}/api/bots/${botId}/roles`, {\n        headers: {\n          Authorization: `Bearer bot__${token}`\n        }\n      })\n      .then(({ data: { payload: data } }) => {\n        logger.debug('[Cloud] Received roles: ', data)\n        return data\n      })\n      .catch(err => {\n        const message = _.get(err, 'response.data.message') || err.message || 'Unknown error'\n        logger.error('[Cloud] Error receiving roles: ' + message)\n        return null\n      })\n\n    return rolesPromise\n  }\n\n  async function getUserRoles(roleNames) {\n    if (!isPaired()) {\n      return null\n    }\n\n    const roles = await _getRemoteRoles()\n    return roleNames.reduce((acc, roleName) => {\n      const role = _.find(roles, { name: roleName })\n      acc[roleName] = role && role.rules\n      return acc\n    }, {})\n  }\n\n  return {\n    getCloudEndpoint,\n    getBotEnv,\n    getUserRoles,\n    getCertificate: _getWellKnownRSACert,\n    isPaired,\n    getPairingInfo,\n    updateRemoteEnv\n  }\n}\n"]}