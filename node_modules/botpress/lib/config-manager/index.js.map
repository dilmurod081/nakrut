{"version":3,"sources":["../../src/config-manager/index.js"],"names":["validations","any","value","validation","string","choice","_","includes","bool","transformers","defaultValues","amendOption","option","name","validTypes","keys","type","Error","default","required","env","amendOptions","options","mapValues","ConfigurationManager","constructor","isDeveloping","schema","Joi","object","configLocation","min","botfile","logger","assert","_memoizedLoadAll","memoize","_loadAll","bind","_loadFromDefaultValues","_loadFromConfigFile","file","filePath","path","resolve","fs","existsSync","content","readFileSync","json5","parse","_loadFromEnvVariables","obj","process","key","isNil","entry","findKey","config","Object","assign","getModuleConfiguration","module","ModuleConfiguration","manager","loadAll","caching","getter","get"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * The Configuration Manager is in charge of the configuration\n * for all the modules. It knows how to provision and load configuration\n * from the right places (env variables, files, botfile).\n * @namespace ConfigurationManager\n * @private\n */\n\nimport Joi from 'joi'\nimport _ from 'lodash'\nimport yn from 'yn'\nimport path from 'path'\nimport fs from 'fs'\nimport json5 from 'json5'\n\nimport ModuleConfiguration from './module'\nimport { isDeveloping } from '../util'\n\nconst validations = {\n  any: (value, validation) => validation(value),\n  string: (value, validation) => typeof value === 'string' && validation(value),\n  choice: (value, validation) => _.includes(validation, value),\n  bool: (value, validation) => (yn(value) === true || yn(value) === false) && validation(value)\n}\n\nconst transformers = {\n  bool: value => yn(value)\n}\n\nconst defaultValues = {\n  any: null,\n  string: '',\n  bool: false\n}\n\nconst amendOption = (option, name) => {\n  const validTypes = _.keys(validations)\n  if (!option.type || !_.includes(validTypes, option.type)) {\n    throw new Error(`Invalid type (${option.type || ''}) for config key (${name})`)\n  }\n\n  const validation = option.validation || (() => true)\n\n  if (typeof option.default !== 'undefined' && !validations[option.type](option.default, validation)) {\n    throw new Error(`Invalid default value (${option.default}) for (${name})`)\n  }\n\n  if (!option.default && !_.includes(_.keys(defaultValues), option.type)) {\n    throw new Error(`Default value is mandatory for type ${option.type} (${name})`)\n  }\n\n  return {\n    type: option.type,\n    required: option.required || false,\n    env: option.env || null,\n    default: option.default || defaultValues[option.type],\n    validation: validation\n  }\n}\n\nconst amendOptions = options => {\n  return _.mapValues(options, amendOption)\n}\n\nexport default class ConfigurationManager {\n  constructor(options) {\n    if (isDeveloping) {\n      const schema = Joi.object().keys({\n        configLocation: Joi.string()\n          .min(1)\n          .required(),\n        botfile: Joi.object().required(),\n        logger: Joi.object().required()\n      })\n\n      Joi.assert(options, schema, 'Invalid constructor elements for Configuration Manager')\n    }\n\n    this.configLocation = options.configLocation\n    this.botfile = options.botfile\n    this.logger = options.logger\n    this._memoizedLoadAll = _.memoize(this._loadAll.bind(this))\n  }\n\n  _loadFromDefaultValues(options) {\n    return _.mapValues(options, value => value.default)\n  }\n\n  _loadFromConfigFile(file, options) {\n    const filePath = path.resolve(this.configLocation, file)\n\n    if (fs.existsSync(filePath)) {\n      const content = fs.readFileSync(filePath, 'utf8')\n      return json5.parse(content)\n    }\n\n    return {}\n  }\n\n  _loadFromEnvVariables(options) {\n    const obj = {}\n\n    _.mapValues(process.env, (value, key) => {\n      if (_.isNil(value)) {\n        return\n      }\n      const entry = _.findKey(options, { env: key })\n      if (entry) {\n        obj[entry] = value\n      }\n    })\n\n    return obj\n  }\n\n  _loadAll(file, options = {}) {\n    options = amendOptions(options)\n\n    let config = this._loadFromDefaultValues(options)\n    Object.assign(config, this._loadFromConfigFile(file, options))\n    Object.assign(config, this._loadFromEnvVariables(options))\n\n    // Transform the values if there's a transformer for this type of value\n    config = _.mapValues(config, (value, key) => {\n      const { type } = options[key]\n      if (transformers[type]) {\n        return transformers[type](value)\n      } else {\n        return value\n      }\n    })\n\n    return config\n  }\n\n  /**\n   * Returns a Configuration for a specific module\n   * @param  {Object} module A module object\n   * @private\n   * @return {ModuleConfiguration} A module-specific configuration\n   */\n  getModuleConfiguration(module) {\n    return new ModuleConfiguration({\n      manager: this,\n      module: module,\n      configLocation: this.configLocation,\n      logger: this.logger\n    })\n  }\n\n  /**\n   * Loads configuration from the right module\n   * @param  {String} file The name of the configuration file\n   * @param  {Object} options\n   * @private\n   * @return {Object} The full configuration object, assembled from various sources\n   */\n  async loadAll(file, options, caching = true) {\n    const getter = caching ? this._memoizedLoadAll : this._loadAll\n    return getter(file, options)\n  }\n\n  async get(file, key, options, caching = true) {\n    const config = await this.loadAll(file, options, caching)\n    return config[key]\n  }\n}\n"]}