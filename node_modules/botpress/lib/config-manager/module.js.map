{"version":3,"sources":["../../src/config-manager/module.js"],"names":["ModuleConfiguration","constructor","options","manager","module","logger","configLocation","_getFileName","sanitizedName","name","replace","path","delimiter","_getOptions","_hasDefaultConfig","filePath","resolve","fs","existsSync","_readDefaultConfig","readFileSync","loadAll","caching","config","file","_","mapValues","value","key","message","error","Error","saveAll","newConfig","configPath","join","oldConfig","JSON","parse","Object","assign","writeFileSync","stringify","get","bootstrap","content","info","isConfigMissing"],"mappings":"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","file":"module.js","sourcesContent":["import path from 'path'\nimport fs from 'fs'\nimport _ from 'lodash'\n\nexport default class ModuleConfiguration {\n  constructor(options) {\n    this.manager = options.manager\n    this.module = options.module\n    this.logger = options.logger\n    this.configLocation = options.configLocation\n  }\n\n  _getFileName() {\n    const sanitizedName = this.module.name\n      .replace(/^@botpress(-)?\\//i, '')\n      .replace(/^botpress(-)?/i, '')\n      .replace(path.delimiter, '_')\n\n    return `${sanitizedName}.json`\n  }\n\n  _getOptions() {\n    return this.module.options\n  }\n\n  _hasDefaultConfig() {\n    const filePath = path.resolve(this.module.path, 'config.json')\n    return fs.existsSync(filePath)\n  }\n\n  _readDefaultConfig() {\n    const filePath = path.resolve(this.module.path, 'config.json')\n    return fs.readFileSync(filePath, 'utf8')\n  }\n\n  async loadAll(caching = true) {\n    const config = await this.manager.loadAll(this._getFileName(), this._getOptions(), caching)\n\n    const file = this._getFileName()\n    const filePath = path.resolve(this.configLocation, file)\n\n    _.mapValues(config, (value, key) => {\n      if (value === '<<UPDATE_ME>>') {\n        const message = `[${this.module.name}] Missing mandatory configuration for \"${key}\". \nYou can provide this value in \"${filePath}\"`\n        this.logger.error(message)\n        throw new Error(message)\n      }\n    })\n\n    return config\n  }\n\n  saveAll(newConfig) {\n    const configPath = path.join(this.configLocation, this._getFileName())\n    const oldConfig = JSON.parse(fs.readFileSync(configPath, 'utf8'))\n\n    const config = Object.assign(oldConfig, newConfig)\n    fs.writeFileSync(configPath, JSON.stringify(config), 'utf8')\n  }\n\n  async get(key, caching = true) {\n    return this.manager.get(this._getFileName(), key, this._getOptions(), caching)\n  }\n\n  /**\n   * Copy the module's default configuration file to the bot's config directory\n   * @private\n   */\n  async bootstrap() {\n    if (!this._hasDefaultConfig()) {\n      return\n    }\n\n    const file = this._getFileName()\n    const filePath = path.resolve(this.configLocation, file)\n    const content = this._readDefaultConfig()\n\n    fs.writeFileSync(filePath, content, 'utf8')\n    this.logger.info(`Configuration for module \"${this.module.name}\" has been created at ${filePath}`)\n  }\n\n  /**\n   * Checks whether the module has a configuration file\n   * and if the bot doesn't have the configuration file for it.\n   * @private\n   * @return {Boolean}\n   */\n  async isConfigMissing() {\n    const file = this._getFileName()\n    const filePath = path.resolve(this.configLocation, file)\n    return this._hasDefaultConfig() && !fs.existsSync(filePath)\n  }\n}\n"]}