{"version":3,"sources":["../../src/database/index.js"],"names":["initializeCoreDatabase","knex","botpressPath","Error","directory","path","join","Promise","mapSeries","tables","fn","then","migrate","latest","createKnex","sqlite","postgres","logger","commonConfig","useNullAsDefault","dbConfig","enabled","client","connection","filename","location","pool","afterCreate","conn","cb","run","_knex","Object","assign","module","exports","getDb","saveUser","id","platform","gender","timezone","locale","picture_url","first_name","last_name","userId","userRow","created_on","Date","toISOString","query","insert","where","select","raw","from","toString","replace","kvsInstance","createKvs","_kvs","bootstrap","getKvs","kvsGet","args","instance","get","kvsSet","set","kvsWrapper","migration","kvs","warn"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * The db (database) namespace lets you control the database directly via [Knex]{@link http://knexjs.org/}\n * @public\n * @namespace Database\n * @example\n * await knex = bp.db.get()\n */\n\nimport Promise from 'bluebird'\nimport moment from 'moment'\nimport knex from 'knex'\nimport pick from 'lodash/pick'\nimport path from 'path'\n\nimport tables from './tables'\nimport kvs from './kvs'\nimport migration from './migration'\n\nconst initializeCoreDatabase = (knex, botpressPath) => {\n  if (!knex) {\n    throw new Error('You must initialize the database before')\n  }\n\n  const directory = path.join(botpressPath, './migrations/')\n  return Promise.mapSeries(tables, fn => fn(knex)).then(() => knex.migrate.latest({ directory }))\n}\n\nconst createKnex = async ({ sqlite, postgres, botpressPath, logger }) => {\n  const commonConfig = {\n    useNullAsDefault: true\n  }\n  const dbConfig = postgres.enabled\n    ? {\n        client: 'pg',\n        connection: postgres.connection || pick(postgres, ['host', 'port', 'user', 'password', 'database', 'ssl'])\n      }\n    : {\n        client: 'sqlite3',\n        connection: { filename: sqlite.location },\n        pool: {\n          afterCreate: (conn, cb) => {\n            conn.run('PRAGMA foreign_keys = ON', cb)\n          }\n        }\n      }\n\n  const _knex = knex(Object.assign(commonConfig, dbConfig))\n\n  await initializeCoreDatabase(_knex, botpressPath)\n  return _knex\n}\n\nmodule.exports = ({ sqlite, postgres, logger, botpressPath }) => {\n  let knex = null\n\n  const getDb = async () => {\n    if (!knex) {\n      knex = await createKnex({ sqlite, postgres, botpressPath, logger })\n    }\n\n    return knex\n  }\n\n  const saveUser = async ({\n    id,\n    platform,\n    gender = 'unknown',\n    timezone = null,\n    locale = null,\n    picture_url,\n    first_name,\n    last_name\n  }) => {\n    const userId = platform + ':' + id\n    const userRow = {\n      id: userId,\n      userId: id,\n      platform,\n      gender,\n      timezone,\n      picture_url,\n      last_name,\n      first_name,\n      locale,\n      created_on: moment(new Date()).toISOString()\n    }\n\n    const knex = await getDb()\n    let query = knex('users')\n      .insert(userRow)\n      .where(function() {\n        return this.select(knex.raw(1))\n          .from('users')\n          .where('id', '=', userId)\n      })\n\n    if (postgres.enabled) {\n      query = `${query.toString()} on conflict (id) do nothing`.replace('?', '\\\\?') // escape \"?\" symbols in strings\n    } else {\n      // SQLite\n      query = query.toString().replace(/^insert/i, 'insert or ignore')\n    }\n\n    await knex.raw(query)\n    return userRow\n  }\n\n  let kvsInstance = null\n\n  const createKvs = async () => {\n    const knex = await getDb()\n    const _kvs = kvs(knex)\n    await _kvs.bootstrap()\n    return _kvs\n  }\n\n  const getKvs = async () => {\n    if (!kvsInstance) {\n      kvsInstance = createKvs()\n    }\n\n    return kvsInstance\n  }\n\n  const kvsGet = (...args) => getKvs().then(instance => instance.get(...args))\n  const kvsSet = (...args) => getKvs().then(instance => instance.set(...args))\n\n  const kvsWrapper = { get: kvsGet, set: kvsSet }\n\n  return {\n    /**\n     * Returns an initialized and connected instance of [Knex]{@link http://knexjs.org/}.\n     * Knex is a SQL Query Builder and database abstractor that Botpress (and every Botpress modules) use internally.\n     * [Knex Documentation]{@link http://knexjs.org/#Builder}\n     * @func\n     * @async\n     * @memberOf! Database\n     * @return {KnexQueryBuilder}\n     */\n    get: getDb,\n    saveUser,\n    location: postgres.enabled ? 'postgres' : sqlite.location,\n    migration,\n    get kvs() {\n      logger &&\n        logger.warn(\n          '[Deprecation Notice] `bp.db.kvs` is deprecated and will be removed in Botpress 11. Please use `bp.kvs` directly instead.'\n        )\n      return kvsWrapper\n    },\n    _kvs: kvsWrapper\n  }\n}\n"]}