{"version":3,"sources":["../../src/database/migration.js"],"names":["getMigrationDirIfExist","dirList","root","migrationPath","path","resolve","runUp","knex","dir","passedMigrations","select","map","name","dirFiles","filter","test","file","includes","sort","index","length","migration","require","up","insert","migration_time","Date","module","exports","db","moduleDefinitions","migrationsDirList","reduce","get","createTableIfNotExists","table","increments","primary","string","timestamp","Promise","all","down"],"mappings":";;AAMA;;;;AACA;;AACA;;;;;;2cARA;;;;;;AAUA,MAAMA,yBAAyB,CAACC,OAAD,EAAU,EAAEC,IAAF,EAAV,KAAuB;AACpD,QAAMC,gBAAgBC,eAAKC,OAAL,CAAaH,IAAb,EAAmB,cAAnB,CAAtB;;AAEA,SAAO,oBAAWC,aAAX,IAA4B,CAAC,GAAGF,OAAJ,EAAaE,aAAb,CAA5B,GAA0DF,OAAjE;AACD,CAJD;;AAMA,MAAMK;AAAA,+BAAQ,WAAOC,IAAP,EAAaC,GAAb,EAAqB;AACjC,UAAMC,mBAAmB,CAAC,MAAMF,KAAK,wBAAL,EAA+BG,MAA/B,CAAsC,MAAtC,CAAP,EAAsDC,GAAtD,CAA0D,UAAC,EAAEC,IAAF,EAAD;AAAA,aAAcA,IAAd;AAAA,KAA1D,CAAzB;AACA,UAAMC,WAAW,qBAAYL,GAAZ,EACdM,MADc,CACP;AAAA,aAAQ,iBAAgBC,IAAhB,CAAqBC,IAArB,KAA8B,CAACP,iBAAiBQ,QAAjB,CAA0BD,IAA1B;AAAvC;AAAA,KADO,EAEdE,IAFc,EAAjB;;AAIA,SAAK,IAAIC,QAAQ,CAAjB,EAAoBA,QAAQN,SAASO,MAArC,EAA6CD,OAA7C,EAAsD;AACpD,YAAMP,OAAOC,SAASM,KAAT,CAAb;AACA,YAAME,YAAYC,QAAQlB,eAAKC,OAAL,CAAaG,GAAb,EAAkBI,IAAlB,CAAR,CAAlB;;AAEAS,gBAAUE,EAAV,KAAiB,MAAMF,UAAUE,EAAV,CAAahB,IAAb,CAAvB;AACA,YAAMA,KAAK,wBAAL,EAA+BiB,MAA/B,CAAsC,EAAEZ,IAAF,EAAQa,gBAAgB,IAAIC,IAAJ,EAAxB,EAAtC,CAAN;AACD;AACF,GAbK;;AAAA;AAAA;AAAA;AAAA,IAAN;;AAeAC,OAAOC,OAAP;AAAA,gCAAiB,WAAOC,EAAP,EAAWC,oBAAoB,EAA/B,EAAsC;AACrD,UAAMC,oBAAoBD,kBAAkBE,MAAlB,CAAyBhC,sBAAzB,EAAiD,EAAjD,CAA1B;AACA,UAAMO,OAAO,MAAMsB,GAAGI,GAAH,EAAnB;;AAEA,UAAM,uBAAQ1B,IAAR,EAAc2B,sBAAd,CAAqC,wBAArC,EAA+D,iBAAS;AAC5EC,YAAMC,UAAN,CAAiB,IAAjB,EAAuBC,OAAvB;AACAF,YAAMG,MAAN,CAAa,MAAb;AACAH,YAAMI,SAAN,CAAgB,gBAAhB;AACD,KAJK,CAAN;;AAMA,WAAO;AACLhB,UAAI;AAAA,eAAMiB,QAAQC,GAAR,CAAYV,kBAAkBpB,GAAlB,CAAsB;AAAA,iBAAOL,MAAMC,IAAN,EAAYC,GAAZ,CAAP;AAAA,SAAtB,CAAZ,CAAN;AAAA,OADC;AAEL;;;;AAIAkC,YAAM;AAAA,eAAO,EAAP;AAAA,OAND,CAMY;AANZ,KAAP;AAQD,GAlBD;;AAAA;AAAA;AAAA;AAAA","file":"migration.js","sourcesContent":["/*\n  It's module for run migration for every module which has dir \"/migrations\"\n  in module root folder. Every files in dir must be\n  [timestamp_miliseconds]__[name].js (example: 1538478025618__hitl_messages.js)\n*/\n\nimport path from 'path'\nimport { existsSync, readdirSync } from 'fs'\nimport helpers from './helpers'\n\nconst getMigrationDirIfExist = (dirList, { root }) => {\n  const migrationPath = path.resolve(root, './migrations')\n\n  return existsSync(migrationPath) ? [...dirList, migrationPath] : dirList\n}\n\nconst runUp = async (knex, dir) => {\n  const passedMigrations = (await knex('knex_module_migrations').select('name')).map(({ name }) => name)\n  const dirFiles = readdirSync(dir)\n    .filter(file => /^\\d+__.+\\.js$/.test(file) && !passedMigrations.includes(file))\n    .sort()\n\n  for (let index = 0; index < dirFiles.length; index++) {\n    const name = dirFiles[index]\n    const migration = require(path.resolve(dir, name))\n\n    migration.up && (await migration.up(knex))\n    await knex('knex_module_migrations').insert({ name, migration_time: new Date() })\n  }\n}\n\nmodule.exports = async (db, moduleDefinitions = []) => {\n  const migrationsDirList = moduleDefinitions.reduce(getMigrationDirIfExist, [])\n  const knex = await db.get()\n\n  await helpers(knex).createTableIfNotExists('knex_module_migrations', table => {\n    table.increments('id').primary()\n    table.string('name')\n    table.timestamp('migration_time')\n  })\n\n  return {\n    up: () => Promise.all(migrationsDirList.map(dir => runUp(knex, dir))),\n    /*\n      TODO: write it only with changes in \"botpress CL\"\n      maybe it will be make this command: botpress migrate:[up||down] [module_name]\n    */\n    down: () => ({}) // TODO: write it only with changes in \"botpress CL\"\n  }\n}\n"]}