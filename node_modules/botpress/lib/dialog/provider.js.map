{"version":3,"sources":["../../src/dialog/provider.js"],"names":["PLACING_STEP","FlowProvider","EventEmitter2","constructor","logger","botfile","projectLocation","ghostManager","wildcard","maxListeners","flowsDir","mkdirp","sync","path","dirname","addRootFolder","filesGlob","loadAll","flows","directoryListing","map","flowPath","flow","uiEq","Promise","_uiPath","readFile","filePath","JSON","parse","schemaError","warn","links","unplacedIndex","nodes","position","_","get","find","id","node","x","y","maxBy","name","location","filter","Boolean","pick","saveFlows","Error","flowsToSave","mapSeries","_prepareSaveFlow","flowsSavePromises","flatten","uiPath","flowContent","uiContent","upsertFile","stringify","pathsToOmit","flowFiles","flowsDeletePromises","deleteFile","all","concat","emit","version","omit","replace"],"mappings":"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","file":"provider.js","sourcesContent":["import path from 'path'\nimport _ from 'lodash'\nimport Promise from 'bluebird'\nimport EventEmitter2 from 'eventemitter2'\nimport mkdirp from 'mkdirp'\n\nimport { validateFlowSchema } from './validator'\n\nconst PLACING_STEP = 250\n\nexport default class FlowProvider extends EventEmitter2 {\n  constructor({ logger, botfile, projectLocation, ghostManager }) {\n    super({\n      wildcard: true,\n      maxListeners: 100\n    })\n\n    this.logger = logger\n    this.botfile = botfile\n    this.projectLocation = projectLocation\n    this.ghostManager = ghostManager\n    this.flowsDir = this.botfile.flowsDir || './flows'\n\n    mkdirp.sync(path.dirname(this.flowsDir))\n    this.ghostManager.addRootFolder(this.flowsDir, { filesGlob: '**/*.json' })\n  }\n\n  async loadAll() {\n    const flows = await this.ghostManager.directoryListing(this.flowsDir, '.flow.json').map(async flowPath => {\n      const [flow, uiEq] = (await Promise.map([flowPath, this._uiPath(flowPath)], filePath =>\n        this.ghostManager.readFile(this.flowsDir, filePath)\n      )).map(JSON.parse)\n\n      if (!flow) {\n        return null\n      }\n\n      const schemaError = validateFlowSchema(flow)\n      if (schemaError) {\n        this.logger.warn(schemaError)\n        return null\n      }\n\n      flow.links = uiEq.links\n\n      // Take position from UI files or create default position\n      let unplacedIndex = -1\n      flow.nodes = flow.nodes.map(node => {\n        const position = _.get(_.find(uiEq.nodes, { id: node.id }), 'position')\n        unplacedIndex = position ? unplacedIndex : unplacedIndex + 1\n\n        return {\n          ...node,\n          x: position ? position.x : 50 + unplacedIndex * PLACING_STEP,\n          y: position ? position.y : (_.maxBy(flow.nodes, 'y') || { y: 0 }).y + PLACING_STEP\n        }\n      })\n\n      return {\n        name: flowPath,\n        location: flowPath,\n        nodes: flow.nodes.filter(Boolean),\n        ..._.pick(flow, 'version', 'catchAll', 'startNode', 'links', 'skillData', 'timeoutNode')\n      }\n    })\n\n    return flows.filter(Boolean)\n  }\n\n  async saveFlows(flows) {\n    if (!flows.find(({ flow }) => flow === 'main.flow.json')) {\n      throw new Error(`[Flow] Expected flows list to contain 'main.flow.json'`)\n    }\n    const flowsToSave = await Promise.mapSeries(flows, flow => this._prepareSaveFlow(flow))\n    const flowsSavePromises = _.flatten(\n      flowsToSave.map(({ flowPath, uiPath, flowContent, uiContent }) => [\n        this.ghostManager.upsertFile(this.flowsDir, flowPath, JSON.stringify(flowContent, null, 2)),\n        this.ghostManager.upsertFile(this.flowsDir, uiPath, JSON.stringify(uiContent, null, 2))\n      ])\n    )\n\n    const pathsToOmit = _.flatten(flowsToSave.map(flow => [flow.flowPath, flow.uiPath]))\n\n    const flowFiles = await this.ghostManager.directoryListing(this.flowsDir, '.json', pathsToOmit)\n    const flowsDeletePromises = flowFiles.map(filePath => this.ghostManager.deleteFile(this.flowsDir, filePath))\n\n    await Promise.all(flowsSavePromises.concat(flowsDeletePromises))\n\n    this.emit('flowsChanged')\n  }\n\n  async _prepareSaveFlow(flow) {\n    flow = { ...flow, version: '0.1' }\n\n    const schemaError = validateFlowSchema(flow)\n    if (schemaError) {\n      throw new Error(schemaError)\n    }\n\n    // What goes in the ui.json file\n    const uiContent = {\n      nodes: flow.nodes.map(node => ({ id: node.id, position: _.pick(node, 'x', 'y') })),\n      links: flow.links\n    }\n\n    // What goes in the .flow.json file\n    const flowContent = {\n      ..._.pick(flow, 'version', 'catchAll', 'startNode', 'skillData', 'timeoutNode'),\n      nodes: flow.nodes.map(node => _.omit(node, 'x', 'y', 'lastModified'))\n    }\n\n    const flowPath = flow.location\n    return { flowPath, uiPath: this._uiPath(flowPath), flowContent, uiContent }\n  }\n\n  _uiPath(flowPath) {\n    return flowPath.replace(/\\.flow\\.json/i, '.ui.json')\n  }\n}\n"]}