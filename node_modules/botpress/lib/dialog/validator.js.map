{"version":3,"sources":["../../src/dialog/validator.js"],"names":["validateFlowSchema","flow","errorPrefix","location","_","isObjectLike","version","isString","startsWith","startNode","isArray","nodes","find","name","catchAll","onEnter","node","id","length"],"mappings":";;;;;;;AAAA;;;;;;AAEO,MAAMA,kDAAqBC,QAAQ;AACxC,QAAMC,cAAe,wBAAuBD,QAAQA,KAAKE,QAAS,GAAlE;;AAEA,MAAI,CAACF,IAAD,IAAS,CAACG,iBAAEC,YAAF,CAAeJ,IAAf,CAAd,EAAoC;AAClC,WAAO,0BAAP;AACD;;AAED,MAAI,CAACA,KAAKK,OAAN,IAAiB,CAACF,iBAAEG,QAAF,CAAWN,KAAKK,OAAhB,CAAtB,EAAgD;AAC9C,WAAQ,GAAEJ,WAAY,yCAAtB;AACD;;AAED,MAAI,CAACD,KAAKK,OAAL,CAAaE,UAAb,CAAwB,IAAxB,CAAL,EAAoC;AAClC,WAAQ,GAAEN,WAAY,wCAAuCD,KAAKK,OAAQ,GAA1E;AACD;;AAED,MAAI,CAACF,iBAAEG,QAAF,CAAWN,KAAKQ,SAAhB,CAAL,EAAiC;AAC/B,WAAQ,GAAEP,WAAY,8BAAtB;AACD;;AAED,MAAI,CAACE,iBAAEM,OAAF,CAAUT,KAAKU,KAAf,CAAL,EAA4B;AAC1B,WAAQ,GAAET,WAAY,4CAAtB;AACD;;AAED,MAAI,CAACE,iBAAEQ,IAAF,CAAOX,KAAKU,KAAZ,EAAmB,EAAEE,MAAMZ,KAAKQ,SAAb,EAAnB,CAAL,EAAmD;AACjD,WAAQ,GAAEP,WAAY,sDAAtB;AACD;;AAED,MAAID,KAAKa,QAAL,IAAiBb,KAAKa,QAAL,CAAcC,OAAnC,EAA4C;AAC1C,WAAQ,GAAEb,WAAY,yCAAtB;AACD;;AAED,OAAK,MAAMc,IAAX,IAAmBf,KAAKU,KAAxB,EAA+B;AAC7B,QAAI,CAACP,iBAAEG,QAAF,CAAWS,KAAKC,EAAhB,CAAD,IAAwBD,KAAKC,EAAL,CAAQC,MAAR,IAAkB,CAA9C,EAAiD;AAC/C,aAAQ,GAAEhB,WAAY,mBAAkBc,KAAKC,EAAG,KAAID,KAAKH,IAAK,sBAA9D;AACD;AACF;AACF,CApCM","file":"validator.js","sourcesContent":["import _ from 'lodash'\n\nexport const validateFlowSchema = flow => {\n  const errorPrefix = `[Flow] Invalid flow \"${flow && flow.location}\"`\n\n  if (!flow || !_.isObjectLike(flow)) {\n    return 'Invalid JSON flow schema'\n  }\n\n  if (!flow.version || !_.isString(flow.version)) {\n    return `${errorPrefix}, expected valid version but found none`\n  }\n\n  if (!flow.version.startsWith('0.')) {\n    return `${errorPrefix}, unsupported version of the schema \"${flow.version}\"`\n  }\n\n  if (!_.isString(flow.startNode)) {\n    return `${errorPrefix}, expected valid 'startNode'`\n  }\n\n  if (!_.isArray(flow.nodes)) {\n    return `${errorPrefix}, expected 'nodes' to be an array of nodes`\n  }\n\n  if (!_.find(flow.nodes, { name: flow.startNode })) {\n    return `${errorPrefix}, expected 'startNode' to point to a valid node name`\n  }\n\n  if (flow.catchAll && flow.catchAll.onEnter) {\n    return `${errorPrefix}, \"catchAll\" does not support \"onEnter\"`\n  }\n\n  for (const node of flow.nodes) {\n    if (!_.isString(node.id) || node.id.length <= 3) {\n      return `${errorPrefix}, expected node ${node.id} (${node.name}) to have a valid id`\n    }\n  }\n}\n"]}