{"version":3,"sources":["../../src/ghost-content/index.js"],"names":["Promise","promisifyAll","fs","globAsync","promisify","glob","REVISIONS_FILE_NAME","module","exports","logger","db","projectLocation","enabled","normalizeFolder","pendingRevisionsByFolder","trackedFolders","folderOptions","upsert","knex","tableName","where","data","idField","trx","prepareQuery","transacting","select","then","res","id","update","thenReturn","insert","insertedId","recordFile","folderPath","folder","file","isBinary","get","filePath","path","join","column","readFileAsync","content","getPendingRevisions","normalizedFolderName","orderBy","addRootFolder","rootFolder","options","filesGlob","debug","push","revisionsFile","fileRevisionsPromise","catch","code","trim","split","map","s","filter","startsWith","reduce","acc","r","knownRevisions","dbRevisions","all","revisionsToDelete","remainingRevisions","revision","length","whereIn","del","files","cwd","whereNotIn","andWhere","updatePendingForFolder","updatePendingForAllFolders","each","recordRevision","content_id","created_by","upsertFile","count","Number","resolve","transaction","commit","error","err","rollback","revertAllPendingChangesForFile","from","existsSync","readFile","results","result","deleteFile","deleted","Error","binary_content","directoryListing","fileEndingPattern","pathsToOmit","row","getPending","getPendingWithContentForFolder","stringifyBinary","folderInfo","revisions","fileNames","forEach","toString","binary","getPendingWithContent","props","info"],"mappings":"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","file":"index.js","sourcesContent":["import path from 'path'\nimport fs from 'fs'\nimport Promise from 'bluebird'\nimport glob from 'glob'\n\nimport get from 'lodash/get'\nimport partition from 'lodash/partition'\nimport mapValues from 'lodash/mapValues'\nimport uniq from 'lodash/uniq'\n\nimport createTransparent from './transparent'\nimport { normalizeFolder as _normalizeFolder } from './util'\nimport { safeId } from '../util'\n\nPromise.promisifyAll(fs)\nconst globAsync = Promise.promisify(glob)\n\nconst REVISIONS_FILE_NAME = '.ghost-revisions'\n\nmodule.exports = ({ logger, db, projectLocation, enabled }) => {\n  if (!enabled) {\n    return createTransparent({ logger, projectLocation })\n  }\n\n  const normalizeFolder = _normalizeFolder(projectLocation)\n\n  const pendingRevisionsByFolder = {}\n  const trackedFolders = []\n  const folderOptions = {}\n\n  const upsert = ({ knex, tableName, where, data, idField = 'id', trx = null }) => {\n    const prepareQuery = () => (trx ? knex(tableName).transacting(trx) : knex(tableName))\n    return prepareQuery()\n      .where(where)\n      .select(idField)\n      .then(res => {\n        const id = get(res, '0.id')\n        return id\n          ? prepareQuery()\n              .where(idField, id)\n              .update(data)\n              .thenReturn(id)\n          : prepareQuery()\n              .insert({ ...where, ...data }, 'id')\n              .then(([insertedId]) => insertedId)\n      })\n  }\n\n  const recordFile = async (folderPath, folder, file, { isBinary = false } = {}) => {\n    const knex = await db.get()\n    const filePath = path.join(folderPath, file)\n    const column = isBinary ? 'binary_content' : 'content'\n    await fs.readFileAsync(filePath, isBinary ? null : 'utf8').then(content =>\n      upsert({\n        knex,\n        tableName: 'ghost_content',\n        where: { folder, file },\n        data: { [column]: content }\n      })\n    )\n  }\n\n  const getPendingRevisions = async normalizedFolderName => {\n    const knex = await db.get()\n\n    return knex('ghost_revisions')\n      .join('ghost_content', 'ghost_content.id', '=', 'ghost_revisions.content_id')\n      .where('ghost_content.folder', normalizedFolderName)\n      .select(\n        'ghost_content.file',\n        'ghost_revisions.id',\n        'ghost_revisions.revision',\n        'ghost_revisions.created_on',\n        'ghost_revisions.created_by'\n      )\n      .orderBy('ghost_revisions.created_on', 'desc')\n      .then()\n  }\n\n  const addRootFolder = async (rootFolder, options = {}) => {\n    const { folderPath, normalizedFolderName } = normalizeFolder(rootFolder)\n    const { isBinary = false, filesGlob = '**/*' } = options\n\n    logger.debug(`[Ghost Content Manager] adding folder ${normalizedFolderName}`)\n    trackedFolders.push(normalizedFolderName)\n    folderOptions[normalizedFolderName] = options\n\n    // read known revisions\n    const revisionsFile = path.join(folderPath, REVISIONS_FILE_NAME)\n    const fileRevisionsPromise = fs\n      .readFileAsync(revisionsFile, 'utf8')\n      .catch({ code: 'ENOENT' }, () => '')\n      .then(content =>\n        content\n          .trim()\n          .split('\\n')\n          .map(s => s.trim())\n          .filter(s => !!s && !s.startsWith('#'))\n          .reduce((acc, r) => {\n            acc[r] = true\n            return acc\n          }, {})\n      )\n\n    const [knownRevisions, dbRevisions] = await Promise.all([\n      fileRevisionsPromise,\n      getPendingRevisions(normalizedFolderName)\n    ])\n\n    const [revisionsToDelete, remainingRevisions] = partition(dbRevisions, ({ revision }) => knownRevisions[revision])\n\n    const knex = await db.get()\n\n    // cleanup known revisions\n    if (revisionsToDelete.length) {\n      logger.debug(\n        `[Ghost Content Manager] ${normalizedFolderName}: deleting ${revisionsToDelete.length} known revision(s).`\n      )\n      await knex('ghost_revisions')\n        .whereIn('id', revisionsToDelete.map(({ id }) => id))\n        .del()\n    }\n\n    if (remainingRevisions.length) {\n      logger.debug(`[Ghost Content Manager] ${normalizedFolderName}: ${remainingRevisions.length} pending revision(s).`)\n      // record remaining revisions if any\n      pendingRevisionsByFolder[normalizedFolderName] = remainingRevisions\n      return\n    }\n\n    logger.debug(\n      `[Ghost Content Manager] ${normalizedFolderName} has no pending revisions, updating DB from the file system.`\n    )\n    // otherwise update the content in the DB\n    const files = await globAsync(filesGlob, { cwd: folderPath })\n    await Promise.map(files, file => recordFile(folderPath, normalizedFolderName, file, { isBinary }))\n    // and also delete the files no longer in the FS\n    await knex('ghost_content')\n      .whereNotIn('file', files)\n      .andWhere('folder', normalizedFolderName)\n      .del()\n      .then()\n  }\n\n  const updatePendingForFolder = async normalizedFolderName => {\n    pendingRevisionsByFolder[normalizedFolderName] = await getPendingRevisions(normalizedFolderName)\n\n    if (!pendingRevisionsByFolder[normalizedFolderName].length) {\n      delete pendingRevisionsByFolder[normalizedFolderName]\n    }\n  }\n\n  const updatePendingForAllFolders = () => Promise.each(trackedFolders, updatePendingForFolder)\n\n  const recordRevision = (knex, content_id, trx) =>\n    knex('ghost_revisions')\n      .transacting(trx)\n      .insert({ content_id, revision: safeId(), created_by: 'admin' })\n\n  const upsertFile = async (rootFolder, file, content) => {\n    const knex = await db.get()\n\n    const folder = normalizeFolder(rootFolder).normalizedFolderName\n    const { isBinary } = folderOptions[folder]\n    const column = isBinary ? 'binary_content' : 'content'\n\n    if (\n      await knex('ghost_content')\n        .where({ folder, file, [column]: content })\n        .count('id as count')\n        .then(([res]) => Number(res.count) > 0)\n    ) {\n      return Promise.resolve()\n    }\n\n    return knex.transaction(trx => {\n      upsert({\n        knex,\n        tableName: 'ghost_content',\n        where: { folder, file },\n        data: { [column]: content },\n        trx\n      })\n        .then(content_id => recordRevision(knex, content_id, trx))\n        .then(trx.commit)\n        .then(() => updatePendingForFolder(folder))\n        .catch(err => {\n          logger.error('[Ghost Content Manager]', err)\n          trx.rollback()\n        })\n    })\n  }\n\n  const revertAllPendingChangesForFile = async (folder, file) => {\n    const knex = await db.get()\n\n    const { folderPath, normalizedFolderName } = normalizeFolder(folder)\n    const filePath = path.join(folderPath, file)\n    const { isBinary = false } = folderOptions[normalizedFolderName]\n\n    await knex('ghost_revisions')\n      .whereIn('id', function() {\n        // Subquery because SQLite doesn't support delete with joins\n        this.select('ghost_revisions.id')\n          .from('ghost_revisions')\n          .join('ghost_content', 'ghost_content.id', '=', 'ghost_revisions.content_id')\n          .where('folder', folder)\n          .andWhere('file', file)\n      })\n      .del()\n\n    await updatePendingForFolder(folder)\n\n    if (fs.existsSync(filePath)) {\n      // If the file exists on disk it means it was initially source controlled\n      recordFile(folderPath, folder, file, { isBinary })\n    } else {\n      await knex('ghost_content')\n        .where('folder', folder)\n        .andWhere('file', file)\n        .del()\n    }\n  }\n\n  const readFile = async (rootFolder, file) => {\n    const knex = await db.get()\n    const { normalizedFolderName } = normalizeFolder(rootFolder)\n    const { isBinary } = folderOptions[normalizedFolderName] || {}\n    const column = isBinary ? 'binary_content' : 'content'\n\n    return knex('ghost_content')\n      .select(column)\n      .where({ folder: normalizedFolderName, file })\n      .then(results => {\n        if (!results || !results.length) {\n          return null\n        }\n        const result = results[0]\n        return (result && result[column]) || null\n      })\n  }\n\n  const deleteFile = async (rootFolder, file) => {\n    const knex = await db.get()\n    const { normalizedFolderName } = normalizeFolder(rootFolder)\n\n    const id = get(\n      await knex('ghost_content')\n        .where({ folder: normalizedFolderName, file, deleted: 0 })\n        .select('id'),\n      '0.id'\n    )\n\n    if (!id) {\n      throw new Error(`Can't delete file: ${file}: couldn't find it in folder: ${normalizedFolderName}`)\n    }\n\n    return knex.transaction(trx => {\n      knex('ghost_content')\n        .transacting(trx)\n        .where({ id })\n        .update({ deleted: 1, content: null, binary_content: null })\n        .then(() => recordRevision(knex, id, trx))\n        .then(trx.commit)\n        .then(() => updatePendingForFolder(normalizedFolderName))\n        .catch(err => {\n          logger.error('[Ghost Content Manager]', err)\n          trx.rollback()\n        })\n    })\n  }\n\n  const directoryListing = async (rootFolder, fileEndingPattern = '', pathsToOmit = []) => {\n    const knex = await db.get()\n    const { normalizedFolderName } = normalizeFolder(rootFolder)\n    return knex('ghost_content')\n      .select('file')\n      .whereNotIn('file', pathsToOmit)\n      .andWhere({ folder: normalizedFolderName, deleted: 0 })\n      .andWhere('file', 'like', `%${fileEndingPattern}`)\n      .then(res => res.map(row => row.file))\n  }\n\n  const getPending = () => pendingRevisionsByFolder\n\n  const getPendingWithContentForFolder = ({ stringifyBinary = false }) => async (folderInfo, normalizedFolderName) => {\n    const revisions = folderInfo.map(({ revision }) => revision)\n    const fileNames = uniq(folderInfo.map(({ file }) => file))\n    const { isBinary } = folderOptions[normalizedFolderName]\n    const column = isBinary ? 'binary_content' : 'content'\n\n    const knex = await db.get()\n    const files = await knex('ghost_content')\n      .select('file', column, 'deleted')\n      .whereIn('file', fileNames)\n      .andWhere({ folder: normalizedFolderName })\n\n    if (isBinary) {\n      files.forEach(data => {\n        data.content = stringifyBinary ? data.binary_content.toString('base64') : data.binary_content\n        delete data.binary_content\n      })\n    }\n\n    return {\n      files,\n      revisions,\n      binary: isBinary\n    }\n  }\n\n  const getPendingWithContent = ({ stringifyBinary = false } = {}) =>\n    Promise.props(mapValues(pendingRevisionsByFolder, getPendingWithContentForFolder({ stringifyBinary })))\n\n  logger.info('[Ghost Content Manager] Initialized')\n\n  return {\n    addRootFolder,\n    upsertFile,\n    readFile,\n    deleteFile,\n    directoryListing,\n    getPending,\n    getPendingWithContent,\n    revertAllPendingChangesForFile\n  }\n}\n\n// TODO: switch to ES6 modules\nmodule.exports.REVISIONS_FILE_NAME = REVISIONS_FILE_NAME\n"]}