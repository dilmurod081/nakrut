{"version":3,"sources":["../../src/janitor/index.js"],"names":["DEFAULTS","timestampColumn","createJanitor","db","logger","intervalMs","tasks","currentPromise","runTask","table","ttl","debug","knex","get","outdatedCondition","date","isBefore","subtract","where","del","then","runTasks","Promise","each","catch","err","error","message","finally","intervalId","start","setInterval","info","add","options","id","push","Object","assign","remove","i","splice","stop","clearInterval"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AAEA;;;;;;;;AAEA,MAAMA,WAAW;AACfC,mBAAiB;;AAGnB;;;;;;;AAJiB,CAAjB,CAWA,MAAMC,gBAAgB,CAAC,EAAEC,EAAF,EAAMC,MAAN,EAAcC,aAAa,kBAAG,IAAH,CAA3B,EAAD,KAA2C;AAC/D,QAAMC,QAAQ,EAAd;AACA,MAAIC,iBAAiB,IAArB;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAMC;AAAA,iCAAU,WAAO,EAAEC,KAAF,EAASC,GAAT,EAAcT,eAAd,EAAP,EAA2C;AACzDG,aAAOO,KAAP,CAAc,mCAAkCF,KAAM,GAAtD;AACA,YAAMG,OAAO,MAAMT,GAAGU,GAAH,EAAnB;AACA,YAAMC,oBAAoB,uBAAQF,IAAR,EAAcG,IAAd,CAAmBC,QAAnB,CAA4Bf,eAA5B,EAA6C,wBAASgB,QAAT,CAAkBP,GAAlB,EAAuB,IAAvB,CAA7C,CAA1B;AACA,aAAOE,KAAKH,KAAL,EACJS,KADI,CACEJ,iBADF,EAEJK,GAFI,GAGJC,IAHI,EAAP;AAID,KARK;;AAAA;AAAA;AAAA;AAAA,MAAN;;AAUA,QAAMC,WAAW,MAAM;AACrBjB,WAAOO,KAAP,CAAa,4BAAb;AACA,QAAIJ,cAAJ,EAAoB;AAClB;AACAH,aAAOO,KAAP,CAAa,yEAAb;AACA;AACD;AACDJ,qBAAiBe,mBAAQC,IAAR,CAAajB,KAAb,EAAoBE,OAApB,EACdgB,KADc,CACRC,OAAO;AACZrB,aAAOsB,KAAP,CAAa,qBAAb,EAAoCD,IAAIE,OAAxC;AACD,KAHc,EAIdC,OAJc,CAIN,MAAM;AACbrB,uBAAiB,IAAjB;AACD,KANc,CAAjB;AAOD,GAdD;;AAgBA,MAAIsB,aAAa,IAAjB;;AAEA;;;;;;;AAOA,QAAMC,QAAQ,MAAM;AAClB,QAAID,UAAJ,EAAgB;AACd;AACD;AACDA,iBAAaE,YAAYV,QAAZ,EAAsBhB,UAAtB,CAAb;AACAD,WAAO4B,IAAP,CAAY,sBAAZ;AACD,GAND;;AAQA;;;;;;;;;;AAUA,QAAMC,MAAMC,WAAW;AACrB9B,WAAOO,KAAP,CAAc,6BAA4BuB,QAAQzB,KAAM,GAAxD;AACA,UAAM0B,KAAK,uBAAX;AACA7B,UAAM8B,IAAN,CAAWC,OAAOC,MAAP,CAAc,EAAEH,EAAF,EAAd,EAAsBnC,QAAtB,EAAgCkC,OAAhC,CAAX;AACA,WAAOC,EAAP;AACD,GALD;;AAOA;;;;;;AAMA,QAAMI,SAASJ,MAAM;AACnB,UAAMK,IAAI,uBAAUlC,KAAV,EAAiB,EAAE6B,EAAF,EAAjB,CAAV;AACA,QAAIK,IAAI,CAAR,EAAW;AACTpC,aAAOsB,KAAP,CAAc,iCAAgCS,EAAG,GAAjD;AACA;AACD;AACD,UAAM,CAAC,EAAE1B,KAAF,EAAD,IAAcH,MAAMmC,MAAN,CAAaD,CAAb,EAAgB,CAAhB,CAApB;AACApC,WAAOO,KAAP,CAAc,+BAA8BF,KAAM,GAAlD;AACD,GARD;;AAUA;;;;;AAKA,QAAMiC,OAAO,MAAM;AACjBC,kBAAcd,UAAd;AACAA,iBAAa,IAAb;AACAzB,WAAO4B,IAAP,CAAY,sBAAZ;AACD,GAJD;;AAMA,SAAO,EAAEF,KAAF,EAASG,GAAT,EAAcM,MAAd,EAAsBG,IAAtB,EAAP;AACD,CAjGD;;kBAmGexC,a","file":"index.js","sourcesContent":["import Promise from 'bluebird'\nimport nanoid from 'nanoid'\nimport moment from 'moment'\nimport ms from 'ms'\nimport { findIndex } from 'lodash'\n\nimport helpers from '../database/helpers'\n\nconst DEFAULTS = {\n  timestampColumn: 'created_on'\n}\n\n/** The DB Janitor is the component that\n automatically clears old records from the specific tables\n according to the configuration.\n @namespace DbJanitor\n @example\n bp.janitor.add({...})\n */\nconst createJanitor = ({ db, logger, intervalMs = ms('1m') }) => {\n  const tasks = []\n  let currentPromise = null\n\n  // TODO: impplement `debuounce` param which, when set,\n  // prevents the specific task form running too often\n  // The goal is to have the interval reasonably low (1/5/10s)\n  // for some tasks like dialog sessions\n  // but don't run other tasks like logs more often than every 1/5/10min\n  const runTask = async ({ table, ttl, timestampColumn }) => {\n    logger.debug(`[DB Janitor] Running for table \"${table}\"`)\n    const knex = await db.get()\n    const outdatedCondition = helpers(knex).date.isBefore(timestampColumn, moment().subtract(ttl, 'ms'))\n    return knex(table)\n      .where(outdatedCondition)\n      .del()\n      .then()\n  }\n\n  const runTasks = () => {\n    logger.debug('[DB Janitor] Running tasks')\n    if (currentPromise) {\n      // don't run the tasks if the previous batch didn't finish yet\n      logger.debug('[DB Janitor] Skipping the current run, previous operation still running')\n      return\n    }\n    currentPromise = Promise.each(tasks, runTask)\n      .catch(err => {\n        logger.error('[DB Janitor] Error:', err.message)\n      })\n      .finally(() => {\n        currentPromise = null\n      })\n  }\n\n  let intervalId = null\n\n  /**\n   * Start the daemon that will keep checking the DB and delete\n   * the outdated records according to the config,\n   * see {@link DbJanitor#add}.\n   * @function DbJanitor#start\n   * @returns {void}\n   */\n  const start = () => {\n    if (intervalId) {\n      return\n    }\n    intervalId = setInterval(runTasks, intervalMs)\n    logger.info('[DB Janitor] Started')\n  }\n\n  /**\n   * Add the table for the janitor to keep watching and cleaning.\n   * @function DbJanitor#add\n   * @param {object} options\n   * @param {string} options.table The name of the DB table to watch.\n   * @param {number} options.ttl Records Time to Live in **milliseconds**.\n   * @param {string} [options.timestampColumn=\"created_on\"] The column\n   *  to check if the record is outdated.\n   * @returns {string} The id of the added task.\n   */\n  const add = options => {\n    logger.debug(`[DB Janitor] Added table \"${options.table}\"`)\n    const id = nanoid()\n    tasks.push(Object.assign({ id }, DEFAULTS, options))\n    return id\n  }\n\n  /**\n   * Remove the  table for the janitor to keep watching and cleaning.\n   * @function DbJanitor#remove\n   * @param {string} id The ID of the task returned by {@link DbJanitor#add}.\n   * @returns {void}\n   */\n  const remove = id => {\n    const i = findIndex(tasks, { id })\n    if (i < 0) {\n      logger.error(`[DB Janitor] Unknown task ID \"${id}\"`)\n      return\n    }\n    const [{ table }] = tasks.splice(i, 1)\n    logger.debug(`[DB Janitor] Removed table \"${table}\"`)\n  }\n\n  /**\n   * Stop the daemon.\n   * @function DbJanitor#stop\n   * @returns {void}\n   */\n  const stop = () => {\n    clearInterval(intervalId)\n    intervalId = null\n    logger.info('[DB Janitor] Stopped')\n  }\n\n  return { start, add, remove, stop }\n}\n\nexport default createJanitor\n"]}