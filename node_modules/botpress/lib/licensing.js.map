{"version":3,"sources":["../src/licensing.js"],"names":["module","exports","projectLocation","bp","licensesPath","path","join","botpressPath","getLicenses","packageJsonPath","license","JSON","parse","fs","readFileSync","agplContent","toString","botpressContent","agpl","name","licensedUnder","text","botpress","toLowerCase","indexOf","changeLicense","Promise","method","licensePath","licenseFileName","licenseContent","pkg","writeFileSync","stringify","middleware","listeners","hear","event","next","author","response","version","userId","user","id","platform","sendText","middlewares","sendOutgoing","type","raw","to","message","responseTo","getLicensing","licenses","currentLicense","_","find","licensed","status","getFeatures"],"mappings":"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","file":"licensing.js","sourcesContent":["import path from 'path'\nimport fs from 'fs'\nimport Promise from 'bluebird'\n\nimport _ from 'lodash'\n\nimport listeners from './listeners'\nimport { resolveProjectFile } from './util'\n\nmodule.exports = ({ projectLocation, bp }) => {\n  const licensesPath = path.join(bp.botpressPath, './licenses')\n\n  const getLicenses = () => {\n    const packageJsonPath = resolveProjectFile('package.json', projectLocation, true)\n    const { license } = JSON.parse(fs.readFileSync(packageJsonPath))\n\n    const agplContent = fs.readFileSync(path.join(licensesPath, 'LICENSE_AGPL3')).toString()\n    const botpressContent = fs.readFileSync(path.join(licensesPath, 'LICENSE_BOTPRESS')).toString()\n\n    return {\n      agpl: {\n        name: 'AGPL-3.0-only',\n        licensedUnder: license === 'AGPL-3.0-only',\n        text: agplContent\n      },\n      botpress: {\n        name: 'Botpress',\n        licensedUnder: license.toLowerCase().indexOf('botpress') >= 0,\n        text: botpressContent\n      }\n    }\n  }\n\n  const changeLicense = Promise.method(license => {\n    const packageJsonPath = resolveProjectFile('package.json', projectLocation, true)\n\n    const licensePath = resolveProjectFile('LICENSE', projectLocation, true)\n    const licenseFileName = license === 'AGPL-3.0-only' ? 'LICENSE_AGPL3' : 'LICENSE_BOTPRESS'\n    const licenseContent = fs.readFileSync(path.join(licensesPath, licenseFileName))\n\n    const pkg = JSON.parse(fs.readFileSync(packageJsonPath))\n    pkg.license = license\n\n    fs.writeFileSync(licensePath, licenseContent)\n    fs.writeFileSync(packageJsonPath, JSON.stringify(pkg, null, 2))\n  })\n\n  const middleware = listeners.hear(/^BOT_LICENSE$/, (event, next) => {\n    const packageJsonPath = resolveProjectFile('package.json', projectLocation, true)\n    const { license, name, author } = JSON.parse(fs.readFileSync(packageJsonPath))\n\n    const response = `Bot:  ${name}\nCreated by: ${author}\nLicense: ${license}\nBotpress: ${bp.version}`\n\n    const userId = event.user && event.user.id // TODO Use botpress standard user getter\n\n    if (bp[event.platform] && bp[event.platform].sendText) {\n      bp[event.platform].sendText(userId, response)\n    } else {\n      bp.middlewares.sendOutgoing({\n        platform: event.platform,\n        type: 'text',\n        text: response,\n        raw: {\n          to: userId,\n          message: response,\n          responseTo: event\n        }\n      })\n    }\n  })\n\n  return {\n    getLicensing: async () => {\n      const licenses = getLicenses()\n      const currentLicense = _.find(licenses, { licensedUnder: true }) || licenses.botpress\n\n      return {\n        licensed: true,\n        name: currentLicense.name,\n        status: 'Active',\n        text: currentLicense.text\n      }\n    },\n    changeLicense,\n    middleware,\n    getFeatures: () => ({})\n  }\n}\n"]}