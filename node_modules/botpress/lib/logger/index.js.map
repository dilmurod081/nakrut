{"version":3,"sources":["../../src/logger/index.js"],"names":["module","exports","logConfig","_db","logger","winston","Logger","level","process","env","LOG_LEVEL","toLowerCase","isDeveloping","transports","Console","prettyPrint","colorize","silent","silentMode","timestamp","format","enableDbStorageIfNeeded","db","janitor","enabled","ttl","keepDays","add","DbTransport","queryDb","limit","order","Promise","resolve","_query"],"mappings":";;AAeA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;AACA;;;;;;AArBA;;;;;;AAMA;;;;;;;;;AAiBAA,OAAOC,OAAP,GAAiBC,aAAa;AAC5B,MAAIC,MAAM,IAAV;;AAEA,QAAMC,SAAS,IAAIC,kBAAQC,MAAZ,CAAmB;AAChCC,WAAOC,QAAQC,GAAR,CAAYC,SAAZ,GAAwBF,QAAQC,GAAR,CAAYC,SAAZ,CAAsBC,WAAtB,EAAxB,GAA8DC,qBAAe,OAAf,GAAyB,MAD9D;AAEhCC,gBAAY,CACV,IAAIR,kBAAQQ,UAAR,CAAmBC,OAAvB,CAA+B;AAC7BC,mBAAa,IADgB;AAE7BC,gBAAU,IAFmB;AAG7BC,cAAQf,UAAUgB,UAHW;AAI7BC,iBAAW,MAAM,wBAASC,MAAT,CAAgB,UAAhB;AAJY,KAA/B,CADU;AAFoB,GAAnB,CAAf;;AAYAhB,SAAOiB,uBAAP,GAAiC,CAAC,EAAEC,EAAF,EAAMC,OAAN,EAAD,KAAqB;AACpD,QAAIrB,UAAUsB,OAAd,EAAuB;AACrBrB,YAAMmB,EAAN;AACA,YAAMG,MAAM,kBAAI,GAAEvB,UAAUwB,QAAV,IAAsB,EAAG,MAA/B,CAAZ;AACAtB,aAAOuB,GAAP,CAAWC,qBAAX,EAAwB,EAAEH,GAAF,EAAOH,EAAP,EAAWC,OAAX,EAAxB;AACD;AACF,GAND;;AAQAnB,SAAOyB,OAAP,GAAiB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACjC,QAAI,CAAC7B,UAAUsB,OAAf,EAAwB;AACtB,aAAOQ,mBAAQC,OAAR,CAAgB,EAAhB,CAAP;AACD;AACD,WAAOL,sBAAYM,MAAZ,CAAmB/B,GAAnB,EAAwB2B,KAAxB,EAA+BC,KAA/B,CAAP;AACD,GALD;;AAOA,SAAO3B,MAAP;AACD,CA/BD","file":"index.js","sourcesContent":["/**\n * @typedef {Function} Logger~MessageLogger\n * @param {String} message Message to log\n * @param {...Object} objects Additional objects to log\n */\n\n/**\n * @class Logger\n * @prop {Logger~MessageLogger} debug Logs message for debugging purposes\n * (hidden in production by default, see {@link Botfile} to change this)\n * @prop {Logger~MessageLogger} info Logs informative messages (shown in production)\n * @prop {Logger~MessageLogger} warn Logs warning messages (shown in production)\n * @prop {Logger~MessageLogger} error Logs error messages (shown in production)\n */\n\nimport moment from 'moment'\nimport ms from 'ms'\nimport winston from 'winston'\nimport Promise from 'bluebird'\n\nimport { isDeveloping } from '../util'\nimport DbTransport from './db-transport'\n\nmodule.exports = logConfig => {\n  let _db = null\n\n  const logger = new winston.Logger({\n    level: process.env.LOG_LEVEL ? process.env.LOG_LEVEL.toLowerCase() : isDeveloping ? 'debug' : 'info',\n    transports: [\n      new winston.transports.Console({\n        prettyPrint: true,\n        colorize: true,\n        silent: logConfig.silentMode,\n        timestamp: () => moment().format('HH:mm:ss')\n      })\n    ]\n  })\n\n  logger.enableDbStorageIfNeeded = ({ db, janitor }) => {\n    if (logConfig.enabled) {\n      _db = db\n      const ttl = ms(`${logConfig.keepDays || 30}days`)\n      logger.add(DbTransport, { ttl, db, janitor })\n    }\n  }\n\n  logger.queryDb = (limit, order) => {\n    if (!logConfig.enabled) {\n      return Promise.resolve([])\n    }\n    return DbTransport._query(_db, limit, order)\n  }\n\n  return logger\n}\n"]}