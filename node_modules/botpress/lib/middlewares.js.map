{"version":3,"sources":["../src/middlewares.js"],"names":["eventConformity","type","value","platform","text","raw","createMiddleware","bp","middlewareName","_use","_error","use","middleware","TypeError","length","dispatch","event","_","isPlainObject","conformsTo","run","err","logger","error","message","_promise","Promise","resolve","module","exports","dataLocation","projectLocation","middlewaresFilePath","path","join","noopChain","arg","JSON","stringify","warn","readCustomizations","fs","existsSync","writeFileSync","parse","readFileSync","incoming","outgoing","customizations","middlewares","writeCustomizations","setCustomizations","each","name","order","enabled","resetCustomizations","register","handler","some","m","push","list","orderBy","map","customization","Object","assign","load","licenseMiddleware","licensing","debug","sendToMiddleware","mw","sendIncoming","messages","in","enqueue","sendOutgoing","out","sendIncomingImmediately","sendOutgoingImmediately","getCustomizations"],"mappings":"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","file":"middlewares.js","sourcesContent":["/**\n * The middleware chain is in charge of pre-processing incoming and outgoing messages.\n * A middleware can for example translate a message on receiving and before sending.\n * Most middleware are registered by the modules. For example, the Analytics module\n * keeps track of the messages with the help of an incoming and an outgoing middleware.\n * @namespace Middleware\n */\n\nimport _ from 'lodash'\nimport mware from 'mware'\nimport path from 'path'\nimport fs from 'fs'\nimport Promise from 'bluebird'\n\nconst eventConformity = {\n  type: value => typeof value === 'string',\n  platform: value => typeof value === 'string',\n  text: value => typeof value === 'string',\n  raw: () => true\n}\n\nconst createMiddleware = (bp, middlewareName) => {\n  const _use = mware()\n  const _error = mware()\n\n  const use = middleware => {\n    if (typeof middleware !== 'function') {\n      throw new TypeError('Expected all middleware arguments to be functions')\n    }\n\n    if (middleware.length === 2) {\n      _use(middleware)\n    } else if (middleware.length === 3) {\n      _error(middleware)\n    }\n  }\n\n  const dispatch = event => {\n    if (!_.isPlainObject(event)) {\n      throw new TypeError('Expected all dispatch arguments to be plain event objects')\n    }\n\n    if (!_.conformsTo(event, eventConformity)) {\n      throw new TypeError('Expected event to contain (type: string), (platform: string), (text: string), (raw: any)')\n    }\n\n    // Provide botpress to the event handlers\n    event.bp = bp\n\n    _use.run(event, err => {\n      if (err) {\n        _error.run(err, event, () => {\n          bp.logger.error(`[BOTPRESS] Unhandled error in middleware (${middlewareName}). Error: ${err.message}`)\n        })\n      }\n    })\n\n    return event._promise || Promise.resolve()\n  }\n\n  return { use, dispatch }\n}\n\nmodule.exports = (bp, dataLocation, projectLocation, logger) => {\n  const middlewaresFilePath = path.join(dataLocation, 'middlewares.json')\n\n  const noopChain = arg => {\n    let message =\n      'Middleware called before middlewares have been loaded. This is a no-op.' +\n      ' Have you forgotten to call `bp.loadMiddlewares()` in your bot?'\n\n    if (arg && typeof arg === 'object') {\n      message += '\\nCalled with: ' + JSON.stringify(arg, null, 2)\n    }\n\n    logger.warn(message)\n  }\n\n  const readCustomizations = () => {\n    if (!fs.existsSync(middlewaresFilePath)) {\n      fs.writeFileSync(middlewaresFilePath, '{}')\n      return {}\n    }\n    return JSON.parse(fs.readFileSync(middlewaresFilePath))\n  }\n\n  let incoming = noopChain,\n    outgoing = noopChain,\n    customizations = readCustomizations()\n  const middlewares = []\n\n  const writeCustomizations = () => {\n    fs.writeFileSync(middlewaresFilePath, JSON.stringify(customizations))\n  }\n\n  const setCustomizations = middlewares => {\n    _.each(middlewares, middleware => {\n      const { name, order, enabled } = middleware\n      customizations[name] = { order, enabled }\n    })\n    writeCustomizations()\n  }\n\n  const resetCustomizations = () => {\n    customizations = {}\n    writeCustomizations()\n  }\n\n  /**\n   * @typedef {Object} Event\n   * @prop {String} platform\n   * @prop {String} text\n   * @prop {object} raw\n   * @prop {String} type\n   * @memberOf! Middleware\n   */\n\n  /**\n   * @callback Handler\n   * @memberOf! Middleware\n   * @param {Object} event The incoming or outgoing event\n   * @param {Function} next Call this function to make the event flow to the next middleware (see example)\n   */\n\n  /**\n   * @typedef {Object} Middleware\n   * @memberOf! Middleware\n   * @property {String} name Unique name of the middleware\n   * @property {Middleware.Handler} handler The handler function\n   * @property {String} type Can be 'incoming' or 'outgoing'\n   * @property {Number} order A positive number from 0 (before everything else) to 1000 (last middleware)\n   * @property {Boolean} [enabled=true] Whether this middleware is enabled or not\n   */\n\n  /**\n   * Registers a new middleware into the chain\n   * @param  {Middleware.Middleware} middleware The middleware to register\n   * @memberOf! Middleware\n   */\n  const register = middleware => {\n    if (!middleware || !middleware.name) {\n      logger.error('A unique middleware name is mandatory')\n      return false\n    }\n\n    if (!middleware.handler) {\n      logger.error('A middleware handler is mandatory')\n      return false\n    }\n\n    if (!middleware.type || (middleware.type !== 'incoming' && middleware.type !== 'outgoing')) {\n      logger.error('A middleware type (incoming or outgoing) is required')\n      return false\n    }\n\n    middleware.order = middleware.order || 0\n    middleware.enabled = typeof middleware.enabled === 'undefined' ? true : !!middleware.enabled\n\n    if (_.some(middlewares, m => m.name === middleware.name)) {\n      logger.error('Another middleware with the same name has already been registered')\n      return false\n    }\n\n    middlewares.push(middleware)\n  }\n\n  const list = () => {\n    return _.orderBy(\n      middlewares.map(middleware => {\n        const customization = customizations[middleware.name]\n        if (customization) {\n          return Object.assign({}, middleware, customization)\n        }\n        return middleware\n      }),\n      'order'\n    )\n  }\n\n  const load = () => {\n    incoming = createMiddleware(bp, 'incoming')\n    outgoing = createMiddleware(bp, 'outgoing')\n\n    const { middleware: licenseMiddleware } = bp.licensing\n    incoming.use(licenseMiddleware)\n\n    _.each(list(), m => {\n      if (!m.enabled) {\n        return logger.debug('SKIPPING middleware:', m.name, ' [Reason=disabled]')\n      }\n\n      logger.debug('Loading middleware:', m.name)\n\n      if (m.type === 'incoming') {\n        incoming.use(m.handler)\n      } else {\n        outgoing.use(m.handler)\n      }\n    })\n  }\n\n  const sendToMiddleware = type => event => {\n    const mw = type === 'incoming' ? incoming : outgoing\n    return mw.dispatch ? mw.dispatch(event) : mw(event)\n  }\n\n  return {\n    load,\n    list,\n    register,\n    /**\n     * Sends an incoming event (from the user to the bot)\n     * @param  {Middleware.Event} event An event object\n     * @memberOf! Middleware\n     */\n    sendIncoming: event => bp.messages.in.enqueue(event),\n\n    /**\n     * Sends an outgoing event (from the bot to the user)\n     * @param  {Middleware.Event} event An event object\n     * @memberOf! Middleware\n     */\n    sendOutgoing: event => bp.messages.out.enqueue(event),\n    sendIncomingImmediately: sendToMiddleware('incoming'),\n    sendOutgoingImmediately: sendToMiddleware('outgoing'),\n    getCustomizations: () => customizations,\n    setCustomizations,\n    resetCustomizations\n  }\n}\n"]}