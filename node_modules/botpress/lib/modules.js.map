{"version":3,"sources":["../src/modules.js"],"names":["module","exports","logger","projectLocation","dataLocation","configManager","loadModules","moduleDefinitions","botpress","loadedCount","loadedModules","Promise","mapSeries","mod","loader","require","entry","err","error","name","message","warn","handlers","configuration","getModuleConfiguration","options","config","path","root","isConfigMissing","bootstrap","init","helpers","info","version","scanModules","packagePath","join","fs","existsSync","botPackage","deps","dependencies","isDeveloping","_","merge","devDependencies","reduce","result","value","key","util","isBotpressPackage","modulePackage","push","homepage","settings","listInstalledModules","prodDeps","keys","filter","getRandomCommunityHero","method","axios","get","then","data","contributors","login","username","html_url","github","avatar_url","avatar","contributions","sample","catch","resolve","listInstalled","_scan","_load"],"mappings":"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","file":"modules.js","sourcesContent":["import path from 'path'\nimport fs from 'fs'\nimport Promise from 'bluebird'\nimport _ from 'lodash'\nimport axios from 'axios'\nimport helpers from './helpers'\nimport util from './util'\n\nimport { isDeveloping, resolveModuleRootPath, resolveFromDir, resolveProjectFile } from './util'\n\nmodule.exports = (logger, projectLocation, dataLocation, configManager) => {\n  const loadModules = async (moduleDefinitions, botpress) => {\n    let loadedCount = 0\n    const loadedModules = {}\n\n    await Promise.mapSeries(moduleDefinitions, async mod => {\n      let loader = null\n      try {\n        loader = require(mod.entry)\n      } catch (err) {\n        return logger.error(`Error loading module \"${mod.name}\": ` + err.message)\n      }\n\n      if (typeof loader !== 'object') {\n        return logger.warn(`Ignoring module ${mod.name}. Invalid entry point signature.`)\n      }\n\n      mod.handlers = loader\n\n      try {\n        const configuration = configManager.getModuleConfiguration({\n          name: mod.name,\n          options: loader.config,\n          path: mod.root\n        })\n\n        if (await configuration.isConfigMissing()) {\n          await configuration.bootstrap()\n        }\n\n        mod.configuration = configuration\n      } catch (err) {\n        logger.error(`Invalid module configuration in module ${mod.name}:`, err)\n      }\n\n      try {\n        loader.init && (await loader.init(botpress, mod.configuration, helpers))\n      } catch (err) {\n        logger.warn('Error during module initialization: ', err)\n      }\n\n      loadedModules[mod.name] = mod\n      logger.info(`Loaded ${mod.name}, version ${mod.version}`)\n      loadedCount++\n    })\n\n    if (loadedCount > 0) {\n      logger.info(`Loaded ${loadedCount} modules`)\n    }\n\n    return loadedModules\n  }\n\n  const scanModules = () => {\n    const packagePath = path.join(projectLocation, 'package.json')\n\n    if (!fs.existsSync(packagePath)) {\n      return logger.warn(\n        'No package.json found at project root, ' + \"which means botpress can't load any module for the bot.\"\n      )\n    }\n\n    const botPackage = require(packagePath)\n\n    let deps = botPackage.dependencies || {}\n    if (isDeveloping) {\n      deps = _.merge(deps, botPackage.devDependencies || {})\n    }\n\n    return _.reduce(\n      deps,\n      (result, value, key) => {\n        if (!util.isBotpressPackage(key)) {\n          return result\n        }\n        const entry = resolveFromDir(projectLocation, key)\n        if (!entry) {\n          return result\n        }\n        const root = resolveModuleRootPath(entry)\n        if (!root) {\n          return result\n        }\n\n        const modulePackage = require(path.join(root, 'package.json'))\n        if (!modulePackage.botpress) {\n          return result\n        }\n\n        return (\n          result.push({\n            name: key,\n            root: root,\n            homepage: modulePackage.homepage,\n            settings: modulePackage.botpress,\n            version: modulePackage.version,\n            entry: entry\n          }) && result\n        )\n      },\n      []\n    )\n  }\n\n  const listInstalledModules = () => {\n    const packagePath = resolveProjectFile('package.json', projectLocation, true)\n    const { dependencies } = require(packagePath)\n    const prodDeps = _.keys(dependencies)\n\n    return _.filter(prodDeps, util.isBotpressPackage)\n  }\n\n  const getRandomCommunityHero = Promise.method(() =>\n    axios\n      .get('https://api.github.com/repos/botpress/botpress/contributors')\n      .then(({ data: contributors }) => {\n        const { login: username, html_url: github, avatar_url: avatar, contributions } = _.sample(contributors)\n        return { username, github, avatar, contributions, module: 'botpress' }\n      })\n      .catch(() =>\n        Promise.resolve({\n          username: 'danyfs',\n          github: 'https://github.com/danyfs',\n          avatar: 'https://avatars1.githubusercontent.com/u/5629987?v=3',\n          contributions: 'many',\n          module: 'botpress'\n        })\n      )\n  )\n\n  return {\n    getRandomCommunityHero,\n    listInstalled: listInstalledModules,\n    _scan: scanModules,\n    _load: loadModules\n  }\n}\n"]}