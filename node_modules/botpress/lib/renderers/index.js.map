{"version":3,"sources":["../../src/renderers/index.js"],"names":["module","exports","logger","middlewares","db","contentManager","botfile","processors","renderers","registerChannel","platform","processOutgoing","_","isString","Error","isFunction","verbose","register","name","rendererFn","startsWith","substr","unregister","isRegistered","invoke","rendererName","context","outputPlatform","incomingEvent","options","throwIfNoPlatform","currentPlatform","doSendContent","messages","Promise","mapSeries","message","__internal","type","delay","wait","sendOutgoing","sendContent","additionalData","initialData","BOT_URL","botUrl","itemName","contentItem","getItem","categoryId","itemCategoryId","itemCategory","getCategorySchema","itemRenderer","renderer","length","Object","assign","isArray","data","items","fullContext","user","event","pick","error","processIncoming","next","reply","incomingMiddleware","order","description","handler","proactiveMethods","registerConnector"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * The Content Renderer is in charge of transforming an {@link ContentManager~Element}\n * into a channel-specific object.\n * @namespace ContentRenderer\n * @example\n * bp.renderers\n */\n\nimport _ from 'lodash'\nimport Promise from 'bluebird'\n\nimport Engine from './engine'\nimport Proactive from './proactive'\n\nmodule.exports = ({ logger, middlewares, db, contentManager, botfile }) => {\n  const processors = {} // A map of all the platforms that can process outgoing messages\n  const renderers = {} // A map of all the registered renderers\n\n  const registerChannel = ({ platform, processOutgoing }) => {\n    if (!_.isString(platform)) {\n      throw new Error(`[Renderers] Platform must be a string, got: ${platform}.`)\n    }\n    if (processors[platform]) {\n      throw new Error(`[Renderers] Platform should only be registered once, platform: ${platform}.`)\n    }\n    if (!_.isFunction(processOutgoing)) {\n      throw new Error(`[Renderers] processOutgoing must be a function, platform: ${platform}.`)\n    }\n\n    logger.verbose(`[Renderers] Enabled for ${platform}.`)\n\n    processors[platform] = processOutgoing\n  }\n\n  /**\n   * @callback Renderer\n   * @memberof! ContentRenderer\n   * @example\n   * bp.renderers.register('#text', data => ({ text: data.englishText }))\n   */\n\n  /**\n   * Registers a new renderer\n   * @param  {String} name Unique name of the renderer (e.g. `#text`).\n   * @param  {ContentRenderer.Renderer} rendererFn The rendering function\n   * @memberOf! ContentRenderer\n   */\n  const register = (name, rendererFn) => {\n    if (!_.isString(name)) {\n      throw new Error(`Renderer name must be a string, received ${name}`)\n    }\n    if (name.startsWith('#')) {\n      name = name.substr(1)\n    }\n\n    renderers[name] = rendererFn\n  }\n\n  /**\n   * Removes a specific renderer if it exists\n   * @param  {String} name Unique name of the renderer (e.g. `#text`)\n   * @memberOf! ContentRenderer\n   */\n  const unregister = name => {\n    if (!_.isString(name)) {\n      throw new Error(`Renderer name must be a string, received ${name}`)\n    }\n    if (name.startsWith('#')) {\n      name = name.substr(1)\n    }\n    delete renderers[name]\n  }\n\n  /**\n   * Returns whether or not a renderer is already registered\n   * @param  {String} name Unique name of the renderer (e.g. `#text`)\n   * @return {Boolean}\n   * @memberOf! ContentRenderer\n   */\n  const isRegistered = name => {\n    if (!_.isString(name)) {\n      throw new Error(`Renderer name must be a string, received ${name}`)\n    }\n    if (name.startsWith('#')) {\n      name = name.substr(1)\n    }\n    return !!renderers[name]\n  }\n\n  const invoke = ({ rendererFn, rendererName, context, outputPlatform, incomingEvent = null }) => {\n    // TODO throw if incomingEvents null <<<==== MOCK IT\n\n    const options = {\n      throwIfNoPlatform: true,\n      currentPlatform: outputPlatform\n    }\n\n    return Engine({ rendererFn, rendererName, context, options, processors, incomingEvent })\n  }\n\n  const doSendContent = async (rendererFn, { rendererName, context, outputPlatform, incomingEvent }) => {\n    const messages = await invoke({ rendererFn, rendererName, context, outputPlatform, incomingEvent })\n\n    return Promise.mapSeries(messages, message => {\n      if (message.__internal) {\n        if (message.type === 'wait') {\n          return Promise.delay(message.wait)\n        }\n      } else {\n        return middlewares.sendOutgoing(message)\n      }\n    })\n  }\n\n  const sendContent = async (incomingEvent, rendererName, additionalData = {}) => {\n    rendererName = rendererName.startsWith('#') ? rendererName.substr(1) : rendererName\n\n    // \"magic\" constants that can be used in the renderers\n    const initialData = {\n      BOT_URL: botfile.botUrl\n    }\n\n    if (rendererName.startsWith('!')) {\n      const itemName = rendererName.substr(1)\n      const contentItem = await contentManager.getItem(itemName)\n\n      if (!contentItem) {\n        throw new Error(`Could not find content item with ID \"${itemName}\" in the Content Manager`)\n      }\n\n      const { categoryId: itemCategoryId } = contentItem\n\n      const itemCategory = contentManager.getCategorySchema(itemCategoryId)\n\n      if (!itemCategory) {\n        throw new Error(\n          `Could not find category \"${itemCategoryId}\" in the Content Manager` + ` for item with ID \"${itemName}\"`\n        )\n      }\n\n      const itemRenderer = itemCategory.renderer\n      if (!_.isString(itemRenderer) || !itemRenderer.startsWith('#') || itemRenderer.length <= 1) {\n        throw new Error(`Invalid renderer '${itemRenderer}' in category '${itemCategoryId}' of Content Manager.\n         A renderer must start with '#'`)\n      }\n\n      rendererName = itemRenderer.substr(1)\n      Object.assign(initialData, _.isArray(contentItem.data) ? { items: contentItem.data } : contentItem.data)\n    }\n\n    const fullContext = {\n      ...initialData,\n      user: incomingEvent.user,\n      event: _.pick(incomingEvent, ['raw', 'text', 'type', 'platform', 'user']),\n      ...additionalData\n    }\n\n    const renderer = renderers[rendererName]\n\n    if (!renderer) {\n      const error = `[Renderer] Renderer not defined (#${rendererName})`\n      logger.error(error)\n      throw new Error(error)\n    }\n\n    await doSendContent(renderer, {\n      rendererName,\n      context: fullContext,\n      outputPlatform: incomingEvent.platform,\n      incomingEvent\n    })\n\n    return {\n      renderer: rendererName,\n      context: fullContext,\n      outputPlatform: incomingEvent.platform\n    }\n  }\n\n  const processIncoming = (event, next) => {\n    event.reply = (rendererName, additionalData = {}) => sendContent(event, rendererName, additionalData)\n    next()\n  }\n\n  const incomingMiddleware = {\n    name: 'rendering.instrumentation',\n    type: 'incoming',\n    order: 2, // Should really be first\n    module: 'botpress',\n    description: 'Built-in Botpress middleware that adds a `.reply` to events. Works with renderers.',\n    handler: processIncoming\n  }\n\n  const proactiveMethods = Proactive({ sendContent, db })\n\n  return {\n    registerChannel,\n    registerConnector: registerChannel, // DEPRECATED Use \"channel\" instead of \"connector\"\n    register,\n    unregister,\n    isRegistered,\n    incomingMiddleware,\n    ...proactiveMethods\n  }\n}\n"]}