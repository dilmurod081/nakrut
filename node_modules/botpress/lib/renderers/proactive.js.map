{"version":3,"sources":["../../src/renderers/proactive.js"],"names":["module","exports","sendContent","db","getUser","id","knex","get","users","where","orWhere","limit","select","length","Error","sendToUser","user","elementOrRenderer","data","_","isString","util","inspect","text","forgedEvent","platform","type","raw","forged","message","to"],"mappings":";;AAAA;;;;AAEA;;;;AACA;;;;;;;;AAEAA,OAAOC,OAAP,GAAiB,CAAC,EAAEC,WAAF,EAAeC,EAAf,EAAD,KAAyB;AACxC,QAAMC;AAAA,iCAAU,WAAMC,EAAN,EAAY;AAC1B,YAAMC,OAAO,MAAMH,GAAGI,GAAH,EAAnB;AACA,YAAMC,QAAQ,MAAMF,KAAK,OAAL,EACjBG,KADiB,CACX,EAAEJ,IAAIA,EAAN,EADW,EAEjBK,OAFiB,CAET,QAFS,EAECL,EAFD,EAGjBM,KAHiB,CAGX,CAHW,EAIjBC,MAJiB,CAIV,GAJU,CAApB;;AAMA,UAAI,CAACJ,KAAD,IAAUA,MAAMK,MAAN,IAAgB,CAA9B,EAAiC;AAC/B,cAAM,IAAIC,KAAJ,CAAW,SAAQT,EAAG,6BAAtB,CAAN;AACD;;AAED,aAAOG,MAAM,CAAN,CAAP;AACD,KAbK;;AAAA;AAAA;AAAA;AAAA,MAAN;;AAeA;;;;;;;;;;AAUA,QAAMO;AAAA,kCAAa,WAAOC,IAAP,EAAaC,iBAAb,EAAgCC,IAAhC,EAAyC;AAC1D,UAAI,CAACC,iBAAEC,QAAF,CAAWH,iBAAX,CAAL,EAAoC;AAClC,cAAM,IAAIH,KAAJ,CAAU,uBAAuBG,iBAAjC,CAAN;AACD;;AAED,UAAIE,iBAAEC,QAAF,CAAWJ,IAAX,CAAJ,EAAsB;AACpBA,eAAO,MAAMZ,QAAQY,IAAR,CAAb;AACD;;AAED,UAAI,CAACA,IAAD,IAAS,CAACA,KAAKX,EAAnB,EAAuB;AACrB,cAAM,IAAIS,KAAJ,CAAU,0BAA0BO,eAAKC,OAAL,CAAaN,IAAb,CAApC,CAAN;AACD;;AAED,YAAMO,OAAO,4DAAb;AACA,YAAMC,cAAc;AAClBC,kBAAUT,KAAKS,QADG;AAElBT,cAAMA,IAFY;AAGlBU,cAAM,WAHY;AAIlBH,cAAMA,IAJY;AAKlBI,aAAK,EAAEC,QAAQ,IAAV,EAAgBC,SAASN,IAAzB,EAA+BO,IAAId,QAAQA,KAAKX,EAAhD;AALa,OAApB;;AAQA,aAAOH,YAAYsB,WAAZ,EAAyBP,iBAAzB,EAA4CC,IAA5C,CAAP;AACD,KAvBK;;AAAA;AAAA;AAAA;AAAA,MAAN;;AAyBA,SAAO,EAAEH,UAAF,EAAP;AACD,CApDD","file":"proactive.js","sourcesContent":["import util from 'util'\n\nimport _ from 'lodash'\nimport Promise from 'bluebird'\n\nmodule.exports = ({ sendContent, db }) => {\n  const getUser = async id => {\n    const knex = await db.get()\n    const users = await knex('users')\n      .where({ id: id })\n      .orWhere('userId', id)\n      .limit(1)\n      .select('*')\n\n    if (!users || users.length <= 0) {\n      throw new Error(`User \"${id}\" not found in the database`)\n    }\n\n    return users[0]\n  }\n\n  /**\n   * Proactively sends a user a message\n   * @param  {string|object} user id or a full user object\n   * @param  {string} elementOrRenderer The name of the renderer to use OR an element id\n   * @param  {object} data Additionnal data that will be passed to the renderer\n   * @async\n   * @memberof! ContentRenderer\n   * @example\n   * bp.renderers.sendToUser(event.user.id, '#!text-77734', { typingIndicators: false })\n   */\n  const sendToUser = async (user, elementOrRenderer, data) => {\n    if (!_.isString(elementOrRenderer)) {\n      throw new Error('Invalid renderer: ' + elementOrRenderer)\n    }\n\n    if (_.isString(user)) {\n      user = await getUser(user)\n    }\n\n    if (!user || !user.id) {\n      throw new Error('Invalid user object: ' + util.inspect(user))\n    }\n\n    const text = 'This is not a real event, it has been forged by proactive.'\n    const forgedEvent = {\n      platform: user.platform,\n      user: user,\n      type: 'proactive',\n      text: text,\n      raw: { forged: true, message: text, to: user && user.id }\n    }\n\n    return sendContent(forgedEvent, elementOrRenderer, data)\n  }\n\n  return { sendToUser }\n}\n"]}