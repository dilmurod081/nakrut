{"version":3,"sources":["../../../src/security/cloud/index.js"],"names":["CloudAuthentication","AbstractAuthenticationProvider","constructor","options","botId","cloud","getPairingInfo","botEnv","getBotEnv","endpoint","getCloudEndpoint","login","success","reason","getAuthenticationInfo","type","authenticateWithError","authHeader","allowProof","Error","scheme","token","split","toLowerCase","secret","getCertificate","algorithm","decoded","jwt","verify","algorithms","identity_proof_only","aud","user","refreshToken","getUserIdentity","getJWTSecretOrCertificate"],"mappings":";;;;;;AAAA;;;;AAEA;;;;;;;;AAEe,MAAMA,mBAAN,SAAkCC,kBAAlC,CAAiE;AAC9EC,cAAYC,OAAZ,EAAqB;AACnB,UAAMA,OAAN;;AAEA,UAAM,EAAEC,KAAF,KAAY,KAAKC,KAAL,CAAWC,cAAX,MAA+B,EAAjD;;AAEA,SAAKF,KAAL,GAAaA,KAAb;AACA,SAAKG,MAAL,GAAc,KAAKF,KAAL,CAAWG,SAAX,EAAd;AACA,SAAKC,QAAL,GAAgB,KAAKJ,KAAL,CAAWK,gBAAX,EAAhB;AACD;;AAEKC,OAAN,GAAc;AAAA;AACZ,aAAO,EAAEC,SAAS,KAAX,EAAkBC,QAAQ,wEAA1B,EAAP;AADY;AAEb;;AAEDC,0BAAwB;AACtB,WAAO;AACLC,YAAM,OADD;AAELX,aAAO,KAAKA,KAFP;AAGLG,cAAQ,KAAKA,MAHR;AAILE,gBAAU,KAAKA;AAJV,KAAP;AAMD;;AAEKO,uBAAN,CAA4BC,UAA5B,EAAwCC,aAAa,KAArD,EAA4D;AAAA;;AAAA;AAC1D,UAAI,CAACD,UAAL,EAAiB;AACf,cAAM,IAAIE,KAAJ,CAAU,qBAAV,CAAN;AACD;;AAED,YAAM,CAACC,MAAD,EAASC,KAAT,IAAkBJ,WAAWK,KAAX,CAAiB,GAAjB,CAAxB;;AAEA,UAAIF,OAAOG,WAAP,OAAyB,QAA7B,EAAuC;AACrC,cAAM,IAAIJ,KAAJ,CAAW,iBAAgBC,MAAO,oBAAlC,CAAN;AACD;;AAED,YAAMI,SAAS,MAAM,MAAKnB,KAAL,CAAWoB,cAAX,EAArB;AACA,YAAMC,YAAY,OAAlB;;AAEA,YAAMC,UAAUC,uBAAIC,MAAJ,CAAWR,KAAX,EAAkBG,MAAlB,EAA0B,EAAEM,YAAY,CAACJ,SAAD,CAAd,EAA1B,CAAhB;;AAEA,UAAI,CAACR,UAAD,IAAeS,QAAQI,mBAA3B,EAAgD;AAC9C,eAAO,KAAP;AACD;;AAED,UAAIJ,QAAQK,GAAR,KAAiB,WAAU,MAAK5B,KAAM,EAA1C,EAA6C;AAC3C,eAAO,KAAP;AACD;;AAED,aAAOuB,QAAQM,IAAf;AAxB0D;AAyB3D;;AAEKC,cAAN,CAAmBjB,UAAnB,EAA+B;AAAA;AAC7B,YAAM,CAACG,MAAD,EAASC,KAAT,IAAkBJ,WAAWK,KAAX,CAAiB,GAAjB,CAAxB;AACA,UAAIF,OAAOG,WAAP,OAAyB,QAA7B,EAAuC;AACrC;AACA,eAAO;AACLX,mBAAS,KADJ;AAELC,kBAAS,iBAAgBO,MAAO;AAF3B,SAAP;AAID;;AAED;AACA,aAAO;AACLR,iBAAS,IADJ;AAELS;AAFK,OAAP;AAX6B;AAe9B;;AAEKc,iBAAN,CAAsBd,KAAtB,EAA6B;AAAA;;AAAA;AAC3B,aAAO,OAAKL,qBAAL,CAA2B,YAAYK,KAAvC,EAA8C,IAA9C,CAAP;AAD2B;AAE5B;;AAEKe,2BAAN,GAAkC;AAAA;;AAAA;AAChC,aAAO,OAAK/B,KAAL,CAAWoB,cAAX,EAAP;AADgC;AAEjC;AA1E6E;kBAA3DzB,mB","file":"index.js","sourcesContent":["import jwt from 'jsonwebtoken'\n\nimport AbstractAuthenticationProvider from '../provider'\n\nexport default class CloudAuthentication extends AbstractAuthenticationProvider {\n  constructor(options) {\n    super(options)\n\n    const { botId } = this.cloud.getPairingInfo() || {}\n\n    this.botId = botId\n    this.botEnv = this.cloud.getBotEnv()\n    this.endpoint = this.cloud.getCloudEndpoint()\n  }\n\n  async login() {\n    return { success: false, reason: 'Root authentication is disabled when using Botpress Cloud [BPCLOUDERR]' }\n  }\n\n  getAuthenticationInfo() {\n    return {\n      type: 'cloud',\n      botId: this.botId,\n      botEnv: this.botEnv,\n      endpoint: this.endpoint\n    }\n  }\n\n  async authenticateWithError(authHeader, allowProof = false) {\n    if (!authHeader) {\n      throw new Error('Missing auth header')\n    }\n\n    const [scheme, token] = authHeader.split(' ')\n\n    if (scheme.toLowerCase() !== 'bearer') {\n      throw new Error(`Wrong scheme '${scheme}', expected Bearer`)\n    }\n\n    const secret = await this.cloud.getCertificate()\n    const algorithm = 'RS256'\n\n    const decoded = jwt.verify(token, secret, { algorithms: [algorithm] })\n\n    if (!allowProof && decoded.identity_proof_only) {\n      return false\n    }\n\n    if (decoded.aud !== `urn:bot/${this.botId}`) {\n      return false\n    }\n\n    return decoded.user\n  }\n\n  async refreshToken(authHeader) {\n    const [scheme, token] = authHeader.split(' ')\n    if (scheme.toLowerCase() !== 'bearer') {\n      // only support Bearer scheme\n      return {\n        success: false,\n        reason: `Wrong scheme '${scheme}', expected Bearer`\n      }\n    }\n\n    // doesn't matter, can return the same token\n    return {\n      success: true,\n      token\n    }\n  }\n\n  async getUserIdentity(token) {\n    return this.authenticateWithError('bearer ' + token, true)\n  }\n\n  async getJWTSecretOrCertificate() {\n    return this.cloud.getCertificate()\n  }\n}\n"]}