{"version":3,"sources":["../../../src/security/crypto/index.js"],"names":["RANDOM_SECRET_KEY_LENGTH","IV_LENGTH","Crypto","constructor","botfile","algorithm","secretKey","encrypt","text","iv","crypto","randomBytes","cipher","createCipheriv","Buffer","encrypted","update","concat","final","toString","decrypt","textParts","split","shift","encryptedText","join","decipher","createDecipheriv","decrypted"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,MAAMA,2BAA2B,EAAjC;AACA,MAAMC,YAAY,EAAlB;;AAEe,MAAMC,MAAN,CAAa;AAC1BC,cAAY,EAAEC,OAAF,EAAZ,EAAyB;AACvB,SAAKC,SAAL,GAAiB,aAAjB;AACA,SAAKC,SAAL,GAAiBF,QAAQE,SAAR,IAAqB,sBAAON,wBAAP,CAAtC;AACD;;AAEDO,UAAQC,IAAR,EAAc;AACZ,UAAMC,KAAKC,iBAAOC,WAAP,CAAmBV,SAAnB,CAAX;AACA,UAAMW,SAASF,iBAAOG,cAAP,CAAsB,aAAtB,EAAqC,IAAIC,MAAJ,CAAW,KAAKR,SAAhB,CAArC,EAAiEG,EAAjE,CAAf;;AAEA,QAAIM,YAAYH,OAAOI,MAAP,CAAcR,IAAd,CAAhB;AACAO,gBAAYD,OAAOG,MAAP,CAAc,CAACF,SAAD,EAAYH,OAAOM,KAAP,EAAZ,CAAd,CAAZ;;AAEA,WAAOT,GAAGU,QAAH,CAAY,KAAZ,IAAqB,GAArB,GAA2BJ,UAAUI,QAAV,CAAmB,KAAnB,CAAlC;AACD;;AAEDC,UAAQZ,IAAR,EAAc;AACZ,UAAMa,YAAYb,KAAKc,KAAL,CAAW,GAAX,CAAlB;AACA,UAAMb,KAAK,IAAIK,MAAJ,CAAWO,UAAUE,KAAV,EAAX,EAA8B,KAA9B,CAAX;AACA,UAAMC,gBAAgB,IAAIV,MAAJ,CAAWO,UAAUI,IAAV,CAAe,GAAf,CAAX,EAAgC,KAAhC,CAAtB;AACA,UAAMC,WAAWhB,iBAAOiB,gBAAP,CAAwB,aAAxB,EAAuC,IAAIb,MAAJ,CAAW,KAAKR,SAAhB,CAAvC,EAAmEG,EAAnE,CAAjB;;AAEA,QAAImB,YAAYF,SAASV,MAAT,CAAgBQ,aAAhB,CAAhB;AACAI,gBAAYd,OAAOG,MAAP,CAAc,CAACW,SAAD,EAAYF,SAASR,KAAT,EAAZ,CAAd,CAAZ;;AAEA,WAAOU,UAAUT,QAAV,EAAP;AACD;AA1ByB;kBAAPjB,M","file":"index.js","sourcesContent":["import crypto from 'crypto'\nimport nanoid from 'nanoid'\n\nconst RANDOM_SECRET_KEY_LENGTH = 32\nconst IV_LENGTH = 16\n\nexport default class Crypto {\n  constructor({ botfile }) {\n    this.algorithm = 'aes-256-cbc'\n    this.secretKey = botfile.secretKey || nanoid(RANDOM_SECRET_KEY_LENGTH)\n  }\n\n  encrypt(text) {\n    const iv = crypto.randomBytes(IV_LENGTH)\n    const cipher = crypto.createCipheriv('aes-256-cbc', new Buffer(this.secretKey), iv)\n\n    let encrypted = cipher.update(text)\n    encrypted = Buffer.concat([encrypted, cipher.final()])\n\n    return iv.toString('hex') + ':' + encrypted.toString('hex')\n  }\n\n  decrypt(text) {\n    const textParts = text.split(':')\n    const iv = new Buffer(textParts.shift(), 'hex')\n    const encryptedText = new Buffer(textParts.join(':'), 'hex')\n    const decipher = crypto.createDecipheriv('aes-256-cbc', new Buffer(this.secretKey), iv)\n\n    let decrypted = decipher.update(encryptedText)\n    decrypted = Buffer.concat([decrypted, decipher.final()])\n\n    return decrypted.toString()\n  }\n}\n"]}