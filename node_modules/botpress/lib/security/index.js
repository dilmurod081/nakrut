'use strict';

var _joi = require('joi');

var _joi2 = _interopRequireDefault(_joi);

var _root = require('./root');

var _root2 = _interopRequireDefault(_root);

var _cloud = require('./cloud');

var _cloud2 = _interopRequireDefault(_cloud);

var _none = require('./none');

var _none2 = _interopRequireDefault(_none);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

module.exports = (() => {
  var _ref = _asyncToGenerator(function* (options) {
    if (_util.isDeveloping) {
      const schema = _joi2.default.object().keys({
        dataLocation: _joi2.default.string().min(1).required(),
        projectLocation: _joi2.default.string().min(1).required(),
        securityConfig: _joi2.default.object().required(),
        db: _joi2.default.object().required(),
        cloud: _joi2.default.object().required(),
        logger: _joi2.default.object().required()
      });

      _joi2.default.assert(options, schema, 'Invalid constructor elements for Authentication Provider');
    }

    const isCloudPaired = options.securityConfig.useCloud && (yield options.cloud.isPaired());

    if (!options.securityConfig.enabled) {
      return new _none2.default(options);
    }

    if (isCloudPaired) {
      return new _cloud2.default(options);
    } else {
      return new _root2.default(options);
    }
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})();
//# sourceMappingURL=index.js.map