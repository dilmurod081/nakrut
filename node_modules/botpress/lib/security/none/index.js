'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _provider = require('../provider');

var _provider2 = _interopRequireDefault(_provider);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

class RootAuthentication extends _provider2.default {
  login(user, password, ip = 'all') {
    return _asyncToGenerator(function* () {
      return {
        success: true,
        token: 'none'
      };
    })();
  }

  authenticateWithError(authHeader) {
    return _asyncToGenerator(function* () {
      return {
        id: 0,
        username: 'admin',
        email: 'admin@botpress.io',
        first_name: 'Admin',
        last_name: 'Admin',
        avatar_url: null,
        roles: ['admin']
      };
    })();
  }

  getAuthenticationInfo() {
    return {
      type: 'none'
    };
  }

  refreshToken(authHeader) {
    return _asyncToGenerator(function* () {
      const [scheme, token] = authHeader.split(' ');
      if (scheme.toLowerCase() !== 'bearer') {
        // only support Bearer scheme
        return {
          success: false,
          reason: `Wrong scheme ${scheme}, expected Bearer`
        };
      }

      // doesn't matter, can return the same token
      return {
        success: true,
        token
      };
    })();
  }

  getUserIdentity(token) {
    var _this = this;

    return _asyncToGenerator(function* () {
      return _this.authenticateWithError('bearer ' + token);
    })();
  }

  getJWTSecretOrCertificate() {
    return _asyncToGenerator(function* () {
      return null;
    })();
  }
}
exports.default = RootAuthentication;
//# sourceMappingURL=index.js.map