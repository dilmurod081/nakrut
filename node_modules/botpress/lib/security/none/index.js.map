{"version":3,"sources":["../../../src/security/none/index.js"],"names":["RootAuthentication","AbstractAuthenticationProvider","login","user","password","ip","success","token","authenticateWithError","authHeader","id","username","email","first_name","last_name","avatar_url","roles","getAuthenticationInfo","type","refreshToken","scheme","split","toLowerCase","reason","getUserIdentity","getJWTSecretOrCertificate"],"mappings":";;;;;;AAAA;;;;;;;;AAEe,MAAMA,kBAAN,SAAiCC,kBAAjC,CAAgE;AACvEC,OAAN,CAAYC,IAAZ,EAAkBC,QAAlB,EAA4BC,KAAK,KAAjC,EAAwC;AAAA;AACtC,aAAO;AACLC,iBAAS,IADJ;AAELC,eAAO;AAFF,OAAP;AADsC;AAKvC;;AAEKC,uBAAN,CAA4BC,UAA5B,EAAwC;AAAA;AACtC,aAAO;AACLC,YAAI,CADC;AAELC,kBAAU,OAFL;AAGLC,eAAO,mBAHF;AAILC,oBAAY,OAJP;AAKLC,mBAAW,OALN;AAMLC,oBAAY,IANP;AAOLC,eAAO,CAAC,OAAD;AAPF,OAAP;AADsC;AAUvC;;AAEDC,0BAAwB;AACtB,WAAO;AACLC,YAAM;AADD,KAAP;AAGD;;AAEKC,cAAN,CAAmBV,UAAnB,EAA+B;AAAA;AAC7B,YAAM,CAACW,MAAD,EAASb,KAAT,IAAkBE,WAAWY,KAAX,CAAiB,GAAjB,CAAxB;AACA,UAAID,OAAOE,WAAP,OAAyB,QAA7B,EAAuC;AACrC;AACA,eAAO;AACLhB,mBAAS,KADJ;AAELiB,kBAAS,gBAAeH,MAAO;AAF1B,SAAP;AAID;;AAED;AACA,aAAO;AACLd,iBAAS,IADJ;AAELC;AAFK,OAAP;AAX6B;AAe9B;;AAEKiB,iBAAN,CAAsBjB,KAAtB,EAA6B;AAAA;;AAAA;AAC3B,aAAO,MAAKC,qBAAL,CAA2B,YAAYD,KAAvC,CAAP;AAD2B;AAE5B;;AAEKkB,2BAAN,GAAkC;AAAA;AAChC,aAAO,IAAP;AADgC;AAEjC;AAjD4E;kBAA1DzB,kB","file":"index.js","sourcesContent":["import AbstractAuthenticationProvider from '../provider'\n\nexport default class RootAuthentication extends AbstractAuthenticationProvider {\n  async login(user, password, ip = 'all') {\n    return {\n      success: true,\n      token: 'none'\n    }\n  }\n\n  async authenticateWithError(authHeader) {\n    return {\n      id: 0,\n      username: 'admin',\n      email: 'admin@botpress.io',\n      first_name: 'Admin',\n      last_name: 'Admin',\n      avatar_url: null,\n      roles: ['admin']\n    }\n  }\n\n  getAuthenticationInfo() {\n    return {\n      type: 'none'\n    }\n  }\n\n  async refreshToken(authHeader) {\n    const [scheme, token] = authHeader.split(' ')\n    if (scheme.toLowerCase() !== 'bearer') {\n      // only support Bearer scheme\n      return {\n        success: false,\n        reason: `Wrong scheme ${scheme}, expected Bearer`\n      }\n    }\n\n    // doesn't matter, can return the same token\n    return {\n      success: true,\n      token\n    }\n  }\n\n  async getUserIdentity(token) {\n    return this.authenticateWithError('bearer ' + token)\n  }\n\n  async getJWTSecretOrCertificate() {\n    return null\n  }\n}\n"]}