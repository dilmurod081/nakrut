{"version":3,"sources":["../../src/security/provider.js"],"names":["AbstractAuthenticationProvider","constructor","options","Object","assign","login","Error","refreshToken","authenticate","authHeader","authenticateWithError","err","logger","debug","message","getUserIdentity","getAuthenticationInfo","getJWTSecretOrCertificate"],"mappings":";;;;;;;;AAAA;;;;;;AAMe,MAAMA,8BAAN,CAAqC;AAClDC,cAAYC,OAAZ,EAAqB;AACnBC,WAAOC,MAAP,CAAc,IAAd,EAAoBF,OAApB;AACD;;AAED;;;;;AAKAG,UAAQ;AACN,UAAM,IAAIC,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAED;;;;;AAKAC,iBAAe;AACb,UAAM,IAAID,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAED;;;;;AAKME,cAAN,CAAmBC,UAAnB,EAA+B;AAAA;;AAAA;AAC7B,UAAI;AACF,eAAO,MAAM,MAAKC,qBAAL,CAA2BD,UAA3B,CAAb;AACD,OAFD,CAEE,OAAOE,GAAP,EAAY;AACZ,cAAKC,MAAL,CAAYC,KAAZ,CAAkB,SAAlB,EAA6BF,IAAIG,OAAjC;AACA,eAAO,KAAP;AACD;AAN4B;AAO9B;;AAED;;;AAGMJ,uBAAN,GAA8B;AAAA;AAC5B,YAAM,IAAIJ,KAAJ,CAAU,yCAAV,CAAN;AAD4B;AAE7B;;AAED;;;;;AAKAS,oBAAkB;AAChB,UAAM,IAAIT,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAED;;;;;AAKAU,0BAAwB;AACtB,UAAM,IAAIV,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAED;;;;;AAKAW,8BAA4B;AAC1B,UAAM,IAAIX,KAAJ,CAAU,yCAAV,CAAN;AACD;AArEiD;kBAA/BN,8B","file":"provider.js","sourcesContent":["/**\n * Security Provider\n * @private\n * @module security\n */\n\nexport default class AbstractAuthenticationProvider {\n  constructor(options) {\n    Object.assign(this, options)\n  }\n\n  /**\n   * @abstract\n   * @description Login a user to the configured provider\n   * @return {object} An authenticated User object or false if invalid login\n   */\n  login() {\n    throw new Error('Abstract Class: Needs to be implemented')\n  }\n\n  /**\n   * @abstract\n   * @description Returns a fresh token from an old (but still active) token\n   * @return {{ success: bool, token: string, reason: string }} A token object\n   */\n  refreshToken() {\n    throw new Error('Abstract Class: Needs to be implemented')\n  }\n\n  /**\n   * Authenticates a user from an authentication header\n   * @description Example of header is: \"bearer your_token_here\"\n   * @return {object} An authenticated User object or false if invalid login\n   */\n  async authenticate(authHeader) {\n    try {\n      return await this.authenticateWithError(authHeader)\n    } catch (err) {\n      this.logger.debug('[Login]', err.message)\n      return false\n    }\n  }\n\n  /**\n   * @abstract\n   */\n  async authenticateWithError() {\n    throw new Error('Abstract Class: Needs to be implemented')\n  }\n\n  /**\n   * @abstract\n   * @description Retrieve the user's identity from an authentication token\n   * @return {object} An authenticated User object or false if invalid token\n   */\n  getUserIdentity() {\n    throw new Error('Abstract Class: Needs to be implemented')\n  }\n\n  /**\n   * @abstract\n   * @description Returns information about the authentication provider and authentication status\n   * @return {Object} Varies from provider to the other\n   */\n  getAuthenticationInfo() {\n    throw new Error('Abstract Class: Needs to be implemented')\n  }\n\n  /**\n   * @abstract\n   * @description Returns a public JWT certificate or a private JWT key used to sign tokens and validate its origin\n   * @return {String} The public certificate or private secret\n   */\n  getJWTSecretOrCertificate() {\n    throw new Error('Abstract Class: Needs to be implemented')\n  }\n}\n"]}