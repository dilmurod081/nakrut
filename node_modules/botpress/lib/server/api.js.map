{"version":3,"sources":["../../src/server/api.js"],"names":["routersConditions","routers","API_RE","maybeApply","name","fn","req","res","next","router","originalUrl","match","condition","module","exports","bp","_authenticationMiddleware","maybeSendRequireLogin","botfile","login","enabled","status","send","message","user","security","authenticate","headers","authorization","location","end","getCloudRoles","useCloud","isUsingCloud","cloud","isPaired","roles","getUserRoles","installProtector","app","secure","operation","resource","wrap","method","route","handlers","secureMiddleware","sendStatus","err","get","post","put","patch","delete","installRouter","getRouter","conditions","test","Error","use","Object","assign","links","createShortlink","destination","params","toLowerCase","q","qs","stringify","query","link","error","hasQuery","concat","redirect","installMaybeUse","maybeUse","arguments","length","install","bodyParser","json","limit","_","urlencoded","extended"],"mappings":"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","file":"api.js","sourcesContent":["import _ from 'lodash'\nimport bodyParser from 'body-parser'\nimport { Router } from 'express'\nimport qs from 'query-string'\nimport { checkMultipleRoles } from '@botpress/util-roles'\n\nimport anonymousApis from './anonymous'\nimport nonSecuredApis from './non-secured'\nimport securedApis from './secured'\n\nconst routersConditions = {}\nconst routers = {}\n\nconst API_RE = /\\/api\\/(botpress-[^\\/]+).*$/i\n\nconst maybeApply = (name, fn) => {\n  return (req, res, next) => {\n    const router = req.originalUrl.match(API_RE)\n    if (!router) {\n      return fn(req, res, next)\n    }\n\n    if (!routersConditions[router[1]]) {\n      return fn(req, res, next)\n    }\n\n    const condition = routersConditions[router[1]][name]\n    if (condition === false) {\n      next()\n    } else if (typeof condition === 'function' && condition(req) === false) {\n      next()\n    } else {\n      return fn(req, res, next)\n    }\n  }\n}\n\nmodule.exports = bp => {\n  const _authenticationMiddleware = async (req, res, next) => {\n    res.maybeSendRequireLogin = () => {\n      if (!bp.botfile.login.enabled) {\n        res.status(400).send({\n          message: 'Login must be turned on for this API method'\n        })\n\n        return true\n      } else {\n        return false\n      }\n    }\n\n    if (!bp.botfile.login.enabled) {\n      return next()\n    }\n\n    const user = await bp.security.authenticate(req.headers.authorization)\n    if (!!user) {\n      req.user = user\n      next()\n    } else {\n      res\n        .status(401)\n        .location('/login')\n        .end()\n    }\n  }\n\n  const getCloudRoles = async req => {\n    const { useCloud, enabled } = bp.botfile.login\n    const isUsingCloud = !!useCloud && (await bp.cloud.isPaired())\n    if (!isUsingCloud || !enabled) {\n      // No cloud, skip check\n      return false\n    }\n    const { roles } = req.user || {}\n    if (!roles) {\n      return null\n    }\n    return bp.cloud.getUserRoles(roles)\n  }\n\n  const installProtector = app => {\n    app.secure = (operation, resource) => {\n      const wrap = method => (route, ...handlers) => {\n        const secureMiddleware = async (req, res, next) => {\n          try {\n            const roles = await getCloudRoles(req)\n\n            if (roles === false) {\n              return next()\n            }\n\n            if (!checkMultipleRoles(roles, operation, resource)) {\n              return res.sendStatus(403) // Forbidden\n            }\n\n            return next()\n          } catch (err) {\n            return res.status(500).send({ message: err.message })\n          }\n        }\n\n        return app[method](route, secureMiddleware, ...handlers)\n      }\n\n      return {\n        get: wrap('get'),\n        post: wrap('post'),\n        put: wrap('put'),\n        patch: wrap('patch'),\n        delete: wrap('delete')\n      }\n    }\n  }\n\n  const installRouter = app => {\n    /**\n     * Creates an HTTP [Express Router]{@link https://expressjs.com/} that is protected by authentication\n     * The router routes are available at \"http://bot_url/api/:name\"\n     * Where `name` is a string starting with `botpress-`\n     * @func\n     * @alias getRouter\n     * @memberOf! Botpress\n     * @param  {String} name       The name of the router. Must start with `botpress-`\n     * @param  {object=} [conditions] See examples. Conditionally disables built-in Botpress middlewares.\n     * @example\n     * const securedRouter = bp.getRouter('botpress-custom')\n     * const publicRouter = bp.getRouter('botpress-custom', { auth: false })\n     *\n     * // Conditions can also be used like below\n     * const conditions = { 'auth': req => !/\\/webhook/i.test(req.originalUrl) }\n     * const conditionalAuthentication = bp.getRouter('botpress-custom', conditions)\n     */\n    bp.getRouter = (name, conditions) => {\n      if (!/^botpress-/.test(name)) {\n        throw new Error(`The name of a router must start with 'botpress-'. Received: ${name}`)\n      }\n\n      if (!routers[name]) {\n        const router = Router()\n        routers[name] = router\n        app.use(`/api/${name}/`, router)\n      }\n\n      if (conditions) {\n        routersConditions[name] = Object.assign(routersConditions[name] || {}, conditions)\n      }\n\n      installProtector(routers[name])\n      return routers[name]\n    }\n\n    const links = {}\n\n    /**\n     * Creates a short link for a specific API route, making it easier to share, more verbose and elegant.\n     * Short links are available as `http://bot_url/s/{name}`\n     * @alias  createShortlink\n     * @param  {String} name        Unique, url-friendly name of the short link\n     * @param  {String} destination The original route to redirect to\n     * @param  {Object} params      Query parameters to pass the route. Will be serialized.\n     * @memberof! Botpress\n     * @example\n     *   const config = {\n  botName: 'Superbot',\n  botConvoDescription: \"Tell me something!\",\n  backgroundColor: '#ffffff'\n}\n\n// Visiting \"http://bot_url/s/chat\" will display the webchat in fullscreen\nbp.createShortlink('chat', '/lite', {\n  m: 'channel-web',\n  v: 'fullscreen',\n  options: JSON.stringify({ config: config })\n})\n     */\n    bp.createShortlink = (name, destination, params) => {\n      name = name.toLowerCase()\n\n      if (links[name]) {\n        throw new Error(`There's already a shortlink named \"${name}\"`)\n      }\n\n      const q = params ? '?' + qs.stringify(params) : ''\n      links[name] = `${destination}${q}`\n    }\n\n    app.get(`/s/:name`, (req, res) => {\n      const name = req.params.name.toLowerCase()\n      const query = qs.stringify(req.query)\n      let link = links[name]\n\n      if (!link) {\n        return res.status(404).send({ error: `Shortlink \"${name}\" not registered` })\n      }\n\n      if (query) {\n        const hasQuery = /\\?/g.test(link)\n        link = link.concat(`${hasQuery ? '&' : '?'}${query}`)\n      }\n\n      res.redirect(link)\n    })\n  }\n\n  const installMaybeUse = app => {\n    app.maybeUse = function() {\n      if (arguments.length === 3) {\n        app.use(arguments[0], maybeApply(arguments[1], arguments[2]))\n      } else if (arguments.length === 2) {\n        app.use(maybeApply(arguments[0], arguments[1]))\n      }\n    }\n  }\n\n  const install = async app => {\n    installRouter(app)\n    installProtector(app)\n    installMaybeUse(app)\n\n    app.maybeUse('bodyParser.json', bodyParser.json({ limit: _.get(bp.botfile, 'api.bodyMaxSize') || '1mb' }))\n    app.maybeUse('bodyParser.urlencoded', bodyParser.urlencoded({ extended: true }))\n\n    anonymousApis(bp, app)\n\n    app.use('/api/*', maybeApply('auth', _authenticationMiddleware))\n\n    nonSecuredApis(bp, app)\n    securedApis(bp, app)\n  }\n\n  return { install }\n}\n"]}