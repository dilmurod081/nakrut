{"version":3,"sources":["../../src/server/index.js"],"names":["module","exports","bp","serveApi","app","api","install","serveSocket","server","socket","serveStatic","staticStuff","start","use","http","createServer","port","hostname","botfile","Promise","listen","resolve"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;;;;;AAEAA,OAAOC,OAAP,GAAiBC,MAAM;AACrB,QAAMC;AAAA,iCAAW,WAAMC,GAAN,EAAa;AAC5B,YAAMC,MAAM,mBAAIH,EAAJ,CAAZ;AACA,aAAOG,IAAIC,OAAJ,CAAYF,GAAZ,CAAP;AACD,KAHK;;AAAA;AAAA;AAAA;AAAA,MAAN;;AAKA,QAAMG;AAAA,kCAAc,WAAMC,MAAN,EAAgB;AAClC,YAAMC,SAAS,sBAAOP,EAAP,CAAf;AACA,aAAOO,OAAOH,OAAP,CAAeE,MAAf,CAAP;AACD,KAHK;;AAAA;AAAA;AAAA;AAAA,MAAN;;AAKA,QAAME;AAAA,kCAAc,WAAMN,GAAN,EAAa;AAC/B,YAAMO,cAAc,sBAAOT,EAAP,CAApB;AACA,aAAOS,YAAYL,OAAZ,CAAoBF,GAApB,CAAP;AACD,KAHK;;AAAA;AAAA;AAAA;AAAA,MAAN;;AAKA,QAAMQ;AAAA,kCAAQ,aAAY;AACxB,YAAMR,MAAM,wBAAZ;AACAA,UAAIS,GAAJ,CAAQ,4BAAR;AACA,YAAML,SAASM,eAAKC,YAAL,CAAkBX,GAAlB,CAAf;AACA,YAAM,EAAEY,IAAF,EAAQC,QAAR,KAAqBf,GAAGgB,OAA9B;;AAEA,YAAMf,SAASC,GAAT,CAAN;AACA,YAAMG,YAAYC,MAAZ,CAAN;AACA,YAAME,YAAYN,GAAZ,CAAN;;AAEA,aAAO,IAAIe,OAAJ,CAAY,mBAAW;AAC5BX,eAAOY,MAAP,CAAcJ,IAAd,EAAoBC,QAApB,EAA8B;AAAA,iBAAMI,QAAQb,MAAR,CAAN;AAAA,SAA9B;AACD,OAFM,CAAP;AAGD,KAbK;;AAAA;AAAA;AAAA;AAAA,MAAN;;AAeA,SAAO,EAAEI,KAAF,EAAP;AACD,CAhCD","file":"index.js","sourcesContent":["import express from 'express'\nimport compression from 'compression'\nimport http from 'http'\n\nimport Socket from './socket'\nimport Static from './static'\nimport Api from './api'\n\nmodule.exports = bp => {\n  const serveApi = async app => {\n    const api = Api(bp)\n    return api.install(app)\n  }\n\n  const serveSocket = async server => {\n    const socket = Socket(bp)\n    return socket.install(server)\n  }\n\n  const serveStatic = async app => {\n    const staticStuff = Static(bp)\n    return staticStuff.install(app)\n  }\n\n  const start = async () => {\n    const app = express()\n    app.use(compression())\n    const server = http.createServer(app)\n    const { port, hostname } = bp.botfile\n\n    await serveApi(app)\n    await serveSocket(server)\n    await serveStatic(app)\n\n    return new Promise(resolve => {\n      server.listen(port, hostname, () => resolve(server))\n    })\n  }\n\n  return { start }\n}\n"]}