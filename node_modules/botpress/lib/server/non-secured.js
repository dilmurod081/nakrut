'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

module.exports = (bp, app) => {
  app.get('/api/ping', (req, res) => {
    res.send('pong');
  });

  app.get('/api/license', (() => {
    var _ref = _asyncToGenerator(function* (req, res) {
      res.send((yield bp.licensing.getLicensing()));
    });

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  })());

  app.delete('/api/guided-tour', (req, res) => {
    _fs2.default.unlink(_path2.default.join(bp.projectLocation, '.welcome'), () => {
      bp.isFirstRun = false;
      res.sendStatus(200);
    });
  });

  app.get('/api/my-account', (() => {
    var _ref2 = _asyncToGenerator(function* (req, res) {
      const roles = yield bp.cloud.getUserRoles(req.user.roles);
      res.send(_extends({}, req.user, { roles }));
    });

    return function (_x3, _x4) {
      return _ref2.apply(this, arguments);
    };
  })());
};
//# sourceMappingURL=non-secured.js.map