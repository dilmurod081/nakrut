{"version":3,"sources":["../../src/server/socket.js"],"names":["module","exports","bp","install","server","io","admin","of","guest","botfile","login","enabled","use","socketioJwt","authorize","secret","security","getJWTSecretOrCertificate","handshake","on","visitorId","_","get","socket","stats","track","events","emit","event","name","data","socketId","id","length","join","onAny","from","c","startsWith","__socketId","__room","to"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;;;AAEAA,OAAOC,OAAP,GAAiBC,MAAM;AACrB,QAAMC;AAAA,iCAAU,WAAMC,MAAN,EAAgB;AAC9B,YAAMC,KAAK,sBAASD,MAAT,CAAX;;AAEA,YAAME,QAAQD,GAAGE,EAAH,CAAM,QAAN,CAAd;AACA,YAAMC,QAAQH,GAAGE,EAAH,CAAM,QAAN,CAAd;;AAEA,UAAIL,GAAGO,OAAH,CAAWC,KAAX,CAAiBC,OAArB,EAA8B;AAC5BL,cAAMM,GAAN,CACEC,sBAAYC,SAAZ,CAAsB;AACpBC,kBAAQ,MAAMb,GAAGc,QAAH,CAAYC,yBAAZ,EADM;AAEpBC,qBAAW;AAFS,SAAtB,CADF;AAMD;;AAEDZ,YAAMa,EAAN,CAAS,YAAT,EAAuB,kBAAU;AAC/B,cAAMC,YAAYC,iBAAEC,GAAF,CAAMC,MAAN,EAAc,2BAAd,CAAlB;AACArB,WAAGsB,KAAH,CAASC,KAAT,CAAe,QAAf,EAAyB,WAAzB;;AAEAF,eAAOJ,EAAP,CAAU,OAAV,EAAmB,iBAAS;AAC1BjB,aAAGwB,MAAH,CAAUC,IAAV,CAAeC,MAAMC,IAArB,EAA2BD,MAAME,IAAjC,EAAuC,QAAvC,EAAiD;AAC/CV,uBAAWA,SADoC;AAE/CW,sBAAUR,OAAOS,EAF8B;AAG/CxB,mBAAO,KAHwC;AAI/CF,mBAAO;AAJwC,WAAjD;AAMD,SAPD;AAQD,OAZD;;AAcAE,YAAMW,EAAN,CAAS,YAAT,EAAuB,kBAAU;AAC/B,cAAMC,YAAYC,iBAAEC,GAAF,CAAMC,MAAN,EAAc,2BAAd,CAAlB;AACArB,WAAGsB,KAAH,CAASC,KAAT,CAAe,QAAf,EAAyB,WAAzB;;AAEA,YAAIL,aAAaA,UAAUa,MAAV,GAAmB,CAApC,EAAuC;AACrCV,iBAAOW,IAAP,CAAY,aAAad,SAAzB;AACD;;AAEDG,eAAOJ,EAAP,CAAU,OAAV,EAAmB,iBAAS;AAC1BjB,aAAGwB,MAAH,CAAUC,IAAV,CAAeC,MAAMC,IAArB,EAA2BD,MAAME,IAAjC,EAAuC,QAAvC,EAAiD;AAC/CC,sBAAUR,OAAOS,EAD8B;AAE/CZ,uBAAWA,SAFoC;AAG/CZ,mBAAO,IAHwC;AAI/CF,mBAAO;AAJwC,WAAjD;AAMD,SAPD;AAQD,OAhBD;;AAkBAJ,SAAGwB,MAAH,CAAUS,KAAV,CAAgB,UAACP,KAAD,EAAQE,IAAR,EAAcM,IAAd,EAAuB;AACrC,YAAIA,SAAS,QAAb,EAAuB;AACrB,iBADqB,CACd;AACR;;AAED;AACA,cAAMC,IAAIT,MAAMU,UAAN,CAAiB,QAAjB,IAA6B9B,KAA7B,GAAqCF,KAA/C;;AAEA,YAAIwB,SAASA,KAAKS,UAAL,IAAmBT,KAAKU,MAAjC,CAAJ,EAA8C;AAC5C;AACA,iBAAOH,EAAEI,EAAF,CAAKX,KAAKS,UAAL,IAAmBT,KAAKU,MAA7B,EAAqCb,IAArC,CAA0C,OAA1C,EAAmD;AACxDE,kBAAMD,KADkD;AAExDE,kBAAMA;AAFkD,WAAnD,CAAP;AAID;;AAED;AACAO,UAAEV,IAAF,CAAO,OAAP,EAAgB;AACdE,gBAAMD,KADQ;AAEdE,gBAAMA;AAFQ,SAAhB;AAID,OArBD;AAsBD,KArEK;;AAAA;AAAA;AAAA;AAAA,MAAN;;AAuEA,SAAO,EAAE3B,OAAF,EAAP;AACD,CAzED","file":"socket.js","sourcesContent":["import _ from 'lodash'\nimport socketio from 'socket.io'\nimport socketioJwt from 'socketio-jwt'\n\nmodule.exports = bp => {\n  const install = async server => {\n    const io = socketio(server)\n\n    const admin = io.of('/admin')\n    const guest = io.of('/guest')\n\n    if (bp.botfile.login.enabled) {\n      admin.use(\n        socketioJwt.authorize({\n          secret: await bp.security.getJWTSecretOrCertificate(),\n          handshake: true\n        })\n      )\n    }\n\n    admin.on('connection', socket => {\n      const visitorId = _.get(socket, 'handshake.query.visitorId')\n      bp.stats.track('socket', 'connected')\n\n      socket.on('event', event => {\n        bp.events.emit(event.name, event.data, 'client', {\n          visitorId: visitorId,\n          socketId: socket.id,\n          guest: false,\n          admin: true\n        })\n      })\n    })\n\n    guest.on('connection', socket => {\n      const visitorId = _.get(socket, 'handshake.query.visitorId')\n      bp.stats.track('socket', 'connected')\n\n      if (visitorId && visitorId.length > 0) {\n        socket.join('visitor:' + visitorId)\n      }\n\n      socket.on('event', event => {\n        bp.events.emit(event.name, event.data, 'client', {\n          socketId: socket.id,\n          visitorId: visitorId,\n          guest: true,\n          admin: false\n        })\n      })\n    })\n\n    bp.events.onAny((event, data, from) => {\n      if (from === 'client') {\n        return // we sent this ourselves\n      }\n\n      // TODO: use more meaningful name\n      const c = event.startsWith('guest.') ? guest : admin\n\n      if (data && (data.__socketId || data.__room)) {\n        // Send only to this socketId or room\n        return c.to(data.__socketId || data.__room).emit('event', {\n          name: event,\n          data: data\n        })\n      }\n\n      // broadcast event to the front-end clients\n      c.emit('event', {\n        name: event,\n        data: data\n      })\n    })\n  }\n\n  return { install }\n}\n"]}