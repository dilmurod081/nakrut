{"version":3,"sources":["../../src/skills/index.js"],"names":["SKILLS_PREFIX","SKILLS_PREFIX_REGEX","RegExp","SkillsManager","constructor","logger","_log","level","msg","registerSkillsFromModules","modules","_skills","filter","mod","shortName","util","getModuleShortname","name","test","reduce","acc","curr","handlers","generate","_","isFunction","keys","length","generateFlow","skillId","data","Error","generator","generatedFlow","validationError","flow","transitions","isArray"],"mappings":";;;;;;AAAA;;;;AAEA;;;;AACA;;;;;;AAEA,MAAMA,gBAAgB,QAAtB;AACA,MAAMC,sBAAsB,IAAIC,MAAJ,CAAW,MAAMF,aAAjB,CAA5B;;AAEe,MAAMG,aAAN,CAAoB;AACjCC,cAAY,EAAEC,MAAF,EAAZ,EAAwB;AAAA,SAKxBC,IALwB,GAKjB,CAACC,KAAD,EAAQC,GAAR,KAAgB;AACrB,WAAKH,MAAL,IAAe,KAAKA,MAAL,CAAYE,KAAZ,CAAf,IAAqC,KAAKF,MAAL,CAAYE,KAAZ,EAAmBC,GAAnB,CAArC;AACD,KAPuB;;AACtB,SAAKH,MAAL,GAAcA,MAAd;AACA,SAAKC,IAAL,CAAU,MAAV,EAAmB,oBAAnB;AACD;;AAMDG,4BAA0BC,OAA1B,EAAmC;AACjC,SAAKC,OAAL,GAAeD,QACZE,MADY,CACLC,OAAO;AACb,YAAMC,YAAYC,eAAKC,kBAAL,CAAwBH,IAAII,IAA5B,CAAlB;AACA,aAAOhB,oBAAoBiB,IAApB,CAAyBJ,SAAzB,CAAP;AACD,KAJY,EAKZK,MALY,CAKL,CAACC,GAAD,EAAMC,IAAN,KAAe;AACrB,YAAMP,YAAYC,eAAKC,kBAAL,CAAwBK,KAAKJ,IAA7B,CAAlB;AACA,UAAI,CAACI,KAAKC,QAAL,CAAcC,QAAnB,EAA6B;AAC3B,aAAKjB,IAAL,CAAU,MAAV,EAAmB,UAASQ,SAAU,qDAAtC;AACA,eAAOM,GAAP;AACD;;AAED,UAAI,CAACI,iBAAEC,UAAF,CAAaJ,KAAKC,QAAL,CAAcC,QAA3B,CAAL,EAA2C;AACzC,aAAKjB,IAAL,CAAU,MAAV,EAAmB,UAASQ,SAAU,qCAAtC;AACA,eAAOM,GAAP;AACD;;AAEDA,UAAIN,SAAJ,IAAiBO,KAAKC,QAAL,CAAcC,QAA/B;AACA,aAAOH,GAAP;AACD,KAnBY,EAmBV,EAnBU,CAAf;;AAqBA,SAAKd,IAAL,CAAU,MAAV,EAAmB,mBAAkBkB,iBAAEE,IAAF,CAAO,KAAKf,OAAZ,EAAqBgB,MAAO,SAAjE;AACD;;AAEKC,cAAN,CAAmBC,OAAnB,EAA4BC,IAA5B,EAAkC;AAAA;;AAAA;AAChC,UAAI,CAAC,MAAKnB,OAAV,EAAmB;AACjB,cAAM,IAAIoB,KAAJ,CAAU,qCAAV,CAAN;AACD;;AAED;AACAF,gBAAUd,eAAKC,kBAAL,CAAwBa,OAAxB,CAAV;;AAEA,UAAI,CAAC5B,oBAAoBiB,IAApB,CAAyBW,OAAzB,CAAL,EAAwC;AACtCA,kBAAU7B,gBAAgB6B,OAA1B;AACD;;AAED,YAAMG,YAAY,MAAKrB,OAAL,CAAakB,OAAb,CAAlB;AACA,UAAI,CAACG,SAAL,EAAgB;AACd,cAAM,IAAID,KAAJ,CAAW,UAASF,OAAQ,aAA5B,CAAN;AACD;;AAED,YAAMI,gBAAgB,MAAMD,UAAUF,IAAV,CAA5B;AACA,YAAMI,kBAAkB,mCAAmBD,cAAcE,IAAjC,CAAxB;;AAEA,UAAID,eAAJ,EAAqB;AACnB,cAAM,IAAIH,KAAJ,CAAW,UAASF,OAAQ,gCAA+BK,eAAgB,EAA3E,CAAN;AACD;;AAED,UAAI,CAACD,cAAcG,WAAf,IAA8B,CAACZ,iBAAEa,OAAF,CAAUJ,cAAcG,WAAxB,CAAnC,EAAyE;AACvE,cAAM,IAAIL,KAAJ,CAAW,UAASF,OAAQ,uCAA5B,CAAN;AACD;;AAED,aAAOI,aAAP;AA5BgC;AA6BjC;AAhEgC;kBAAd9B,a","file":"index.js","sourcesContent":["import _ from 'lodash'\n\nimport util from '../util'\nimport { validateFlowSchema } from '../dialog/validator'\n\nconst SKILLS_PREFIX = 'skill-'\nconst SKILLS_PREFIX_REGEX = new RegExp('^' + SKILLS_PREFIX)\n\nexport default class SkillsManager {\n  constructor({ logger }) {\n    this.logger = logger\n    this._log('info', `[Skills] Initiated`)\n  }\n\n  _log = (level, msg) => {\n    this.logger && this.logger[level] && this.logger[level](msg)\n  }\n\n  registerSkillsFromModules(modules) {\n    this._skills = modules\n      .filter(mod => {\n        const shortName = util.getModuleShortname(mod.name)\n        return SKILLS_PREFIX_REGEX.test(shortName)\n      })\n      .reduce((acc, curr) => {\n        const shortName = util.getModuleShortname(curr.name)\n        if (!curr.handlers.generate) {\n          this._log('warn', `Skill \"${shortName}\" has no flow generator (\"generate\" method exposed)`)\n          return acc\n        }\n\n        if (!_.isFunction(curr.handlers.generate)) {\n          this._log('warn', `Skill \"${shortName}\" generator is not a valid function`)\n          return acc\n        }\n\n        acc[shortName] = curr.handlers.generate\n        return acc\n      }, {})\n\n    this._log('info', `[Skills] Loaded ${_.keys(this._skills).length} skills`)\n  }\n\n  async generateFlow(skillId, data) {\n    if (!this._skills) {\n      throw new Error(\"Skills haven't been initialized yet\")\n    }\n\n    //vv Backward compatible with old skills, just making sure there's no @botpress or botpress-\n    skillId = util.getModuleShortname(skillId)\n\n    if (!SKILLS_PREFIX_REGEX.test(skillId)) {\n      skillId = SKILLS_PREFIX + skillId\n    }\n\n    const generator = this._skills[skillId]\n    if (!generator) {\n      throw new Error(`Skill \"${skillId}\" not found`)\n    }\n\n    const generatedFlow = await generator(data)\n    const validationError = validateFlowSchema(generatedFlow.flow)\n\n    if (validationError) {\n      throw new Error(`Skill \"${skillId}\" generated an invalid flow: ${validationError}`)\n    }\n\n    if (!generatedFlow.transitions || !_.isArray(generatedFlow.transitions)) {\n      throw new Error(`Skill \"${skillId}\" didn't generate valid \"transitions\"`)\n    }\n\n    return generatedFlow\n  }\n}\n"]}