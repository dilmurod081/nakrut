{"version":3,"sources":["../src/stats.js"],"names":["module","exports","botfile","visitor","queued","catch","hash","crypto","createHash","update","os","arch","hostname","platform","type","digest","then","mid","strictCidFormat","forEach","a","track","category","action","label","value","optOutStats","push","event","trackException","message"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEAA,OAAOC,OAAP,GAAiBC,WAAW;AAC1B,MAAIC,UAAU,IAAd;AACA,MAAIC,SAAS,EAAb;;AAEA,kCACGC,KADH,CACS,MAAM;AACX,UAAMC,OAAOC,iBAAOC,UAAP,CAAkB,QAAlB,CAAb;AACAF,SAAKG,MAAL,CAAYC,aAAGC,IAAH,KAAYD,aAAGE,QAAH,EAAZ,GAA4BF,aAAGG,QAAH,EAA5B,GAA4CH,aAAGI,IAAH,EAAxD;AACA,WAAOR,KAAKS,MAAL,CAAY,KAAZ,CAAP;AACD,GALH,EAMGC,IANH,CAMQC,OAAO;AACXd,cAAU,kCAAG,eAAH,EAAoBc,GAApB,EAAyB,EAAEC,iBAAiB,KAAnB,EAAzB,CAAV;AACAd,WAAOe,OAAP,CAAeC,KAAKA,GAApB;AACAhB,aAAS,EAAT;AACD,GAVH;;AAYA,QAAMiB,QAAQ,CAACC,QAAD,EAAWC,MAAX,EAAmBC,QAAQ,IAA3B,EAAiCC,QAAQ,IAAzC,KAAkD;AAC9D,QAAI,CAAC,CAACvB,QAAQwB,WAAd,EAA2B;AACzB,aADyB,CAClB;AACR;;AAED,QAAI,CAACvB,OAAL,EAAc;AACZC,aAAOuB,IAAP,CAAY,MAAMN,MAAMC,QAAN,EAAgBC,MAAhB,EAAwBC,KAAxB,EAA+BC,KAA/B,CAAlB;AACA;AACD;;AAEDtB,YAAQyB,KAAR,CAAcN,QAAd,EAAwBC,MAAxB,EAAgCC,KAAhC,EAAuCC,KAAvC,EAA8C,MAAM;AAClD;AACD,KAFD;AAGD,GAbD;;AAeA,QAAMI,iBAAiBC,WAAW;AAChC,QAAI,CAAC,CAAC5B,QAAQwB,WAAd,EAA2B;AACzB,aADyB,CAClB;AACR;;AAED,QAAI,CAACvB,OAAL,EAAc;AACZC,aAAOuB,IAAP,CAAY,MAAME,eAAeC,OAAf,CAAlB;AACA;AACD;;AAED3B,YAAQyB,KAAR,CAAcE,OAAd,EAAuB,MAAM;AAC3B;AACD,KAFD;AAGD,GAbD;;AAeA,SAAO,EAAET,KAAF,EAASQ,cAAT,EAAP;AACD,CA/CD","file":"stats.js","sourcesContent":["import os from 'os'\nimport crypto from 'crypto'\nimport ua from 'universal-analytics'\nimport { machineId } from 'node-machine-id'\n\nmodule.exports = botfile => {\n  let visitor = null\n  let queued = []\n\n  machineId()\n    .catch(() => {\n      const hash = crypto.createHash('sha256')\n      hash.update(os.arch() + os.hostname() + os.platform() + os.type())\n      return hash.digest('hex')\n    })\n    .then(mid => {\n      visitor = ua('UA-90044826-1', mid, { strictCidFormat: false })\n      queued.forEach(a => a())\n      queued = []\n    })\n\n  const track = (category, action, label = null, value = null) => {\n    if (!!botfile.optOutStats) {\n      return // Don't track if bot explicitly opted out from stats collection\n    }\n\n    if (!visitor) {\n      queued.push(() => track(category, action, label, value))\n      return\n    }\n\n    visitor.event(category, action, label, value, () => {\n      /* ignore errors */\n    })\n  }\n\n  const trackException = message => {\n    if (!!botfile.optOutStats) {\n      return // Don't track if bot explicitly opted out from stats collection\n    }\n\n    if (!visitor) {\n      queued.push(() => trackException(message))\n      return\n    }\n\n    visitor.event(message, () => {\n      /* ignore errors */\n    })\n  }\n\n  return { track, trackException }\n}\n"]}