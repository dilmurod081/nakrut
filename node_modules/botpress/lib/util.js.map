{"version":3,"sources":["../src/util.js"],"names":["IS_DEV","process","env","NODE_ENV","NPM_CMD","test","platform","PRINT_LEVELS","info","chalk","white","warn","yellow","bind","error","red","success","green","print","level","args","method","concat","console","log","black","bgWhite","Object","keys","forEach","resolveFromDir","fromDir","moduleId","path","resolve","fromFile","join","Module","_resolveFilename","id","filename","paths","_nodeModulePaths","err","resolveModuleRootPath","entryPath","current","dirname","lookup","fs","existsSync","resolveProjectFile","file","projectLocation","throwIfNotExist","packagePath","Error","getDataLocation","dataDir","isAbsolute","getBotpressVersion","botpressPackagePath","__dirname","botpressJson","JSON","parse","readFileSync","version","collectArgs","val","memo","push","getInMemoryDb","client","connection","pool","min","max","disposeTimeout","idleTimeoutMillis","useNullAsDefault","safeId","length","getPackageName","pkg","isScoped","startsWith","scope","name","match","slice","isBotpressPackage","isBotpress","getModuleShortname","withoutPrefix","replace","getCircularReplacer","seen","WeakSet","key","value","has","add","safeStringify","o","stringify","validateBotVersion","bpVersion","botfileVersion","_","isEmpty","isString","semver","valid","msgPreamble","lt","botfileMajorVersion","Number","major","bpMajorVersion","module","exports","isDeveloping","npmCmd"],"mappings":"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","file":"util.js","sourcesContent":["import chalk from 'chalk'\nimport path from 'path'\nimport Module from 'module'\nimport fs from 'fs'\nimport knex from 'knex'\nimport generate from 'nanoid/generate'\nimport semver from 'semver'\nimport _ from 'lodash'\n\nconst IS_DEV = process.env.NODE_ENV !== 'production'\n\nconst NPM_CMD = /^win/.test(process.platform) ? 'npm.cmd' : 'npm'\n\nconst PRINT_LEVELS = {\n  info: chalk.white,\n  warn: chalk.yellow.bind(chalk, 'WARN'),\n  error: chalk.red.bind(chalk, 'ERR'),\n  success: chalk.green.bind(chalk, 'OK')\n}\n\nconst print = (level, ...args) => {\n  let method = PRINT_LEVELS[level]\n\n  if (!method) {\n    args = [level].concat(args)\n    method = PRINT_LEVELS.info\n  }\n\n  console.log(chalk.black.bgWhite('[botpress]'), '\\t', method(...args))\n}\n\nObject.keys(PRINT_LEVELS).forEach(level => {\n  print[level] = (...args) => print(level, ...args)\n})\n\nconst resolveFromDir = (fromDir, moduleId) => {\n  fromDir = path.resolve(fromDir)\n  const fromFile = path.join(fromDir, 'noop.js')\n  try {\n    return Module._resolveFilename(moduleId, {\n      id: fromFile,\n      filename: fromFile,\n      paths: Module._nodeModulePaths(fromDir)\n    })\n  } catch (err) {\n    return null\n  }\n}\n\nconst resolveModuleRootPath = entryPath => {\n  let current = path.dirname(entryPath)\n  while (current !== '/') {\n    const lookup = path.join(current, 'package.json')\n    if (fs.existsSync(lookup)) {\n      return current\n    }\n    current = path.resolve(path.join(current, '..'))\n  }\n  return null\n}\n\nconst resolveProjectFile = (file, projectLocation, throwIfNotExist) => {\n  const packagePath = path.resolve(projectLocation || './', file)\n\n  if (!fs.existsSync(packagePath)) {\n    if (throwIfNotExist) {\n      throw new Error(\"Could not find bot's package.json file\")\n    }\n    return null\n  }\n\n  return packagePath\n}\n\nconst getDataLocation = (dataDir, projectLocation) =>\n  dataDir && path.isAbsolute(dataDir) ? path.resolve(dataDir) : path.resolve(projectLocation, dataDir || 'data')\n\nconst getBotpressVersion = () => {\n  const botpressPackagePath = path.join(__dirname, '../package.json')\n  const botpressJson = JSON.parse(fs.readFileSync(botpressPackagePath))\n\n  return botpressJson.version\n}\n\nconst collectArgs = (val, memo) => {\n  memo.push(val)\n  return memo\n}\n\n// https://github.com/tgriesser/knex/issues/1871#issuecomment-273721116\nconst getInMemoryDb = () =>\n  knex({\n    client: 'sqlite3',\n    connection: ':memory:',\n    pool: {\n      min: 1,\n      max: 1,\n      disposeTimeout: 360000000 * 1000,\n      idleTimeoutMillis: 360000000 * 1000\n    },\n    useNullAsDefault: true\n  })\n\nconst safeId = (length = 10) => generate('1234567890abcdefghijklmnopqrsuvwxyz', length)\n\nconst getPackageName = pkg => {\n  const isScoped = pkg.startsWith('@')\n\n  if (isScoped) {\n    const [scope, name] = pkg.match(/^@(.*)\\/(.*)/).slice(1)\n    return [scope, name]\n  } else {\n    return [null, pkg]\n  }\n}\n\nconst isBotpressPackage = pkg => {\n  const [scope, name] = getPackageName(pkg)\n  const isBotpress = scope === 'botpress' || name.startsWith('botpress-')\n  return isBotpress\n}\n\nconst getModuleShortname = pkg => {\n  const [, name] = getPackageName(pkg)\n  const withoutPrefix = name.replace(/^botpress-/i, '')\n  return withoutPrefix\n}\n\nconst getCircularReplacer = () => {\n  const seen = new WeakSet()\n  return (key, value) => {\n    if (typeof value === 'object' && value !== null) {\n      if (seen.has(value)) {\n        return '[cyclic reference]'\n      }\n      seen.add(value)\n    }\n    return value\n  }\n}\n\nconst safeStringify = o => JSON.stringify(o, getCircularReplacer())\n\nconst validateBotVersion = (bpVersion, botfileVersion) => {\n  if (botfileVersion == null) {\n    throw new Error(`The version field doesn't exist in botfile.js. Set it to \"${bpVersion}\".`)\n  }\n\n  if (_.isEmpty(botfileVersion) || !_.isString(botfileVersion)) {\n    throw new Error(`Version in botfile.js must be non-empty string specifying the valid semver (e.g. \"${bpVersion}\").`)\n  }\n\n  try {\n    // TODO: change this method if \"semver\" module will implement semver.isValid()\n    semver.valid(botfileVersion)\n  } catch (err) {\n    throw new Error(`Version in botfile.js must have proper semver format (e.g. \"${bpVersion}\").`)\n  }\n\n  const msgPreamble = `Your bot may be incompatible with botpress v${bpVersion}\n  because it looks like it was originally created with botpress v${botfileVersion}.\n  To address this `\n\n  if (semver.lt(bpVersion, botfileVersion)) {\n    throw new Error(\n      msgPreamble +\n        'update the versions of botpress and any @botpress/* modules' +\n        ` in your package.json to \"${botfileVersion}\".`\n    )\n  }\n\n  const botfileMajorVersion = Number(semver.major(botfileVersion))\n  const bpMajorVersion = Number(semver.major(bpVersion))\n\n  if (bpMajorVersion > botfileMajorVersion) {\n    throw new Error(\n      msgPreamble +\n        'check https://github.com/botpress/botpress/blob/master/CHANGELOG.md' +\n        ' and update your bot for any breaking changes listed there,' +\n        ` then update the version in your botfile.js to \"${bpVersion}\".`\n    )\n  }\n}\n\nmodule.exports = {\n  print,\n  resolveFromDir,\n  isDeveloping: IS_DEV,\n  resolveModuleRootPath,\n  resolveProjectFile,\n  getDataLocation,\n  npmCmd: NPM_CMD,\n  getBotpressVersion,\n  collectArgs,\n  getInMemoryDb,\n  safeId,\n  isBotpressPackage,\n  getModuleShortname,\n  safeStringify,\n  validateBotVersion\n}\n"]}